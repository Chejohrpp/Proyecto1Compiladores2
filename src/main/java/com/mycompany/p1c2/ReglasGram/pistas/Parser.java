
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.p1c2.ReglasGram.pistas;

import com.mycompany.p1c2.ReglasGram.Token;
import java_cup.runtime.*;
import com.mycompany.p1c2.ReglasGram.pistas.sym.*;
import com.mycompany.p1c2.ReglasGram.auxiliares.*;
import com.mycompany.p1c2.objetos.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\005\003\000\002\005\003\000\002\006\004\000\002" +
    "\007\004\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\005\000" +
    "\002\020\004\000\002\020\003\000\002\020\003\000\002" +
    "\021\006\000\002\021\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\023\003\000\002\023\002\000\002\033\005\000" +
    "\002\034\003\000\002\034\002\000\002\036\004\000\002" +
    "\036\003\000\002\037\004\000\002\040\003\000\002\040" +
    "\003\000\002\041\004\000\002\041\002\000\002\042\005" +
    "\000\002\042\003\000\002\035\004\000\002\035\002\000" +
    "\002\043\003\000\002\043\003\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\004\000\002" +
    "\044\004\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\004" +
    "\000\002\044\004\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\045\004\000\002\047\004\000\002\047\003" +
    "\000\002\054\003\000\002\054\003\000\002\046\004\000" +
    "\002\046\003\000\002\053\004\000\002\053\002\000\002" +
    "\050\004\000\002\051\004\000\002\051\002\000\002\052" +
    "\004\000\002\017\004\000\002\017\003\000\002\024\005" +
    "\000\002\024\004\000\002\024\003\000\002\025\005\000" +
    "\002\026\003\000\002\026\005\000\002\026\003\000\002" +
    "\027\003\000\002\027\002\000\002\030\004\000\002\030" +
    "\003\000\002\031\004\000\002\031\003\000\002\032\005" +
    "\000\002\013\004\000\002\055\005\000\002\056\006\000" +
    "\002\056\003\000\002\057\004\000\002\057\003\000\002" +
    "\060\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\006\003\004\004\005\001\002\000\004\002" +
    "\uffff\001\002\000\006\003\011\046\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\000\001\002\000\010\003" +
    "\232\005\233\056\156\001\002\000\024\003\ufffd\006\ufffd" +
    "\007\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\046" +
    "\ufffd\001\002\000\024\003\030\006\015\007\034\034\031" +
    "\035\025\036\021\037\032\040\014\046\027\001\002\000" +
    "\026\002\ufff4\003\ufff4\006\ufff4\007\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\046\ufff4\001\002\000\006\010" +
    "\uffe2\046\uffe2\001\002\000\022\003\030\007\034\034\031" +
    "\035\025\036\021\037\032\040\014\046\225\001\002\000" +
    "\006\054\uffea\056\uffea\001\002\000\026\002\ufff2\003\ufff2" +
    "\006\ufff2\007\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\046\ufff2\001\002\000\026\002\001\003\030\006\015" +
    "\007\034\034\031\035\025\036\021\037\032\040\014\046" +
    "\027\001\002\000\006\010\uffe4\046\uffe4\001\002\000\004" +
    "\046\222\001\002\000\006\054\uffe9\056\uffe9\001\002\000" +
    "\006\054\172\056\uffd2\001\002\000\006\010\uffe5\046\uffe5" +
    "\001\002\000\026\002\ufff3\003\ufff3\006\ufff3\007\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\046\ufff3\001\002" +
    "\000\014\047\146\051\uffdd\053\042\054\uffdd\056\uffdd\001" +
    "\002\000\032\002\uff9f\003\uff9f\006\uff9f\007\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\046\uff9f\054\uffe7\056" +
    "\uffe7\001\002\000\006\010\uffe6\046\uffe6\001\002\000\006" +
    "\010\uffe3\046\uffe3\001\002\000\026\002\uffa2\003\uffa2\006" +
    "\uffa2\007\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\046\uffa2\001\002\000\014\034\031\035\025\036\021\037" +
    "\032\040\014\001\002\000\006\010\037\046\uffe0\001\002" +
    "\000\004\046\040\001\002\000\004\046\uffe1\001\002\000" +
    "\012\051\uffdd\053\042\054\uffdd\056\uffdd\001\002\000\006" +
    "\054\uffe8\056\uffe8\001\002\000\006\003\144\046\143\001" +
    "\002\000\012\051\uffde\053\042\054\uffde\056\uffde\001\002" +
    "\000\012\051\uffdb\053\uffdb\054\uffdb\056\uffdb\001\002\000" +
    "\010\051\046\054\uffd6\056\uffd6\001\002\000\032\003\061" +
    "\033\054\041\051\042\055\043\057\044\050\045\066\046" +
    "\056\047\060\066\053\077\064\102\052\001\002\000\006" +
    "\054\uffdf\056\uffdf\001\002\000\060\003\uffb3\050\uffb3\052" +
    "\uffb3\053\uffb3\056\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\064\uffb3\065\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076" +
    "\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3" +
    "\107\uffb3\001\002\000\060\003\uffb8\050\uffb8\052\uffb8\053" +
    "\uffb8\056\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\065\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\100" +
    "\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\107\uffb8" +
    "\001\002\000\006\041\140\042\141\001\002\000\032\003" +
    "\067\033\054\041\051\042\055\043\057\044\050\045\066" +
    "\046\056\047\060\066\053\077\064\102\052\001\002\000" +
    "\060\003\uffb5\050\uffb5\052\uffb5\053\uffb5\056\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\072\uffb5\073" +
    "\uffb5\074\uffb5\075\uffb5\076\uffb5\100\uffb5\101\uffb5\102\uffb5" +
    "\103\uffb5\104\uffb5\105\uffb5\107\uffb5\001\002\000\060\003" +
    "\uffb9\050\uffb9\052\uffb9\053\uffb9\056\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\072\uffb9\073\uffb9\074" +
    "\uffb9\075\uffb9\076\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9" +
    "\104\uffb9\105\uffb9\107\uffb9\001\002\000\060\003\uffb4\050" +
    "\uffb4\052\uffb4\053\uffb4\056\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\065\uffb4\072\uffb4\073\uffb4\074\uffb4\075" +
    "\uffb4\076\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4" +
    "\105\uffb4\107\uffb4\001\002\000\060\003\uffb6\050\uffb6\052" +
    "\uffb6\053\uffb6\056\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6" +
    "\064\uffb6\065\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6" +
    "\107\uffb6\001\002\000\032\003\067\033\054\041\051\042" +
    "\055\043\057\044\050\045\066\046\056\047\060\066\053" +
    "\077\064\102\052\001\002\000\052\052\uffb1\054\uffd4\056" +
    "\uffd4\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\100\uffb1\101" +
    "\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\001\002\000\006" +
    "\054\uffd7\056\uffd7\001\002\000\046\052\133\060\106\061" +
    "\100\062\077\063\102\064\073\065\110\072\071\073\104" +
    "\074\111\075\107\076\072\100\101\101\076\102\074\103" +
    "\103\104\105\105\075\001\002\000\032\003\067\033\054" +
    "\041\051\042\055\043\057\044\050\045\066\046\056\047" +
    "\060\066\053\077\064\102\052\001\002\000\060\003\uffb2" +
    "\050\uffb2\052\uffb2\053\uffb2\056\uffb2\060\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\072\uffb2\073\uffb2\074\uffb2" +
    "\075\uffb2\076\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104" +
    "\uffb2\105\uffb2\107\uffb2\001\002\000\060\003\uffb7\050\uffb7" +
    "\052\uffb7\053\uffb7\056\uffb7\060\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\065\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7" +
    "\076\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105" +
    "\uffb7\107\uffb7\001\002\000\060\003\uffb1\050\uffb1\052\uffb1" +
    "\053\uffb1\056\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1" +
    "\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\107" +
    "\uffb1\001\002\000\060\003\uffc2\050\uffc2\052\uffc2\053\uffc2" +
    "\056\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065" +
    "\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\100\uffc2" +
    "\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\107\uffc2\001" +
    "\002\000\032\003\067\033\054\041\051\042\055\043\057" +
    "\044\050\045\066\046\056\047\060\066\053\077\064\102" +
    "\052\001\002\000\032\003\067\033\054\041\051\042\055" +
    "\043\057\044\050\045\066\046\056\047\060\066\053\077" +
    "\064\102\052\001\002\000\032\003\067\033\054\041\051" +
    "\042\055\043\057\044\050\045\066\046\056\047\060\066" +
    "\053\077\064\102\052\001\002\000\032\003\067\033\054" +
    "\041\051\042\055\043\057\044\050\045\066\046\056\047" +
    "\060\066\053\077\064\102\052\001\002\000\032\003\067" +
    "\033\054\041\051\042\055\043\057\044\050\045\066\046" +
    "\056\047\060\066\053\077\064\102\052\001\002\000\032" +
    "\003\067\033\054\041\051\042\055\043\057\044\050\045" +
    "\066\046\056\047\060\066\053\077\064\102\052\001\002" +
    "\000\032\003\067\033\054\041\051\042\055\043\057\044" +
    "\050\045\066\046\056\047\060\066\053\077\064\102\052" +
    "\001\002\000\032\003\067\033\054\041\051\042\055\043" +
    "\057\044\050\045\066\046\056\047\060\066\053\077\064" +
    "\102\052\001\002\000\032\003\067\033\054\041\051\042" +
    "\055\043\057\044\050\045\066\046\056\047\060\066\053" +
    "\077\064\102\052\001\002\000\032\003\067\033\054\041" +
    "\051\042\055\043\057\044\050\045\066\046\056\047\060" +
    "\066\053\077\064\102\052\001\002\000\032\003\067\033" +
    "\054\041\051\042\055\043\057\044\050\045\066\046\056" +
    "\047\060\066\053\077\064\102\052\001\002\000\032\003" +
    "\067\033\054\041\051\042\055\043\057\044\050\045\066" +
    "\046\056\047\060\066\053\077\064\102\052\001\002\000" +
    "\032\003\067\033\054\041\051\042\055\043\057\044\050" +
    "\045\066\046\056\047\060\066\053\077\064\102\052\001" +
    "\002\000\032\003\067\033\054\041\051\042\055\043\057" +
    "\044\050\045\066\046\056\047\060\066\053\077\064\102" +
    "\052\001\002\000\032\003\067\033\054\041\051\042\055" +
    "\043\057\044\050\045\066\046\056\047\060\066\053\077" +
    "\064\102\052\001\002\000\032\003\067\033\054\041\051" +
    "\042\055\043\057\044\050\045\066\046\056\047\060\066" +
    "\053\077\064\102\052\001\002\000\032\003\067\033\054" +
    "\041\051\042\055\043\057\044\050\045\066\046\056\047" +
    "\060\066\053\077\064\102\052\001\002\000\060\003\uffc5" +
    "\050\uffc5\052\uffc5\053\uffc5\056\uffc5\060\106\061\100\062" +
    "\077\063\102\064\073\065\110\072\071\073\104\074\uffc5" +
    "\075\uffc5\076\uffc5\100\101\101\uffc5\102\uffc5\103\103\104" +
    "\105\105\075\107\uffc5\001\002\000\060\003\uffca\050\uffca" +
    "\052\uffca\053\uffca\056\uffca\060\uffca\061\uffca\062\uffca\063" +
    "\uffca\064\uffca\065\uffca\072\uffca\073\uffca\074\uffca\075\uffca" +
    "\076\uffca\100\uffca\101\uffca\102\uffca\103\uffca\104\uffca\105" +
    "\075\107\uffca\001\002\000\060\003\uffbe\050\uffbe\052\uffbe" +
    "\053\uffbe\056\uffbe\060\106\061\100\062\077\063\102\064" +
    "\073\065\110\072\071\073\104\074\uffbe\075\uffbe\076\uffbe" +
    "\100\101\101\uffbe\102\uffbe\103\103\104\105\105\075\107" +
    "\uffbe\001\002\000\060\003\uffcb\050\uffcb\052\uffcb\053\uffcb" +
    "\056\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\100\uffcb" +
    "\101\uffcb\102\uffcb\103\uffcb\104\uffcb\105\075\107\uffcb\001" +
    "\002\000\060\003\uffbd\050\uffbd\052\uffbd\053\uffbd\056\uffbd" +
    "\060\106\061\100\062\077\063\102\064\073\065\110\072" +
    "\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\100\uffbd\101\uffbd" +
    "\102\uffbd\103\uffbd\104\uffbd\105\075\107\uffbd\001\002\000" +
    "\060\003\uffc4\050\uffc4\052\uffc4\053\uffc4\056\uffc4\060\106" +
    "\061\100\062\077\063\102\064\073\065\110\072\uffc4\073" +
    "\uffc4\074\uffc4\075\uffc4\076\uffc4\100\uffc4\101\uffc4\102\uffc4" +
    "\103\uffc4\104\uffc4\105\075\107\uffc4\001\002\000\060\003" +
    "\uffcd\050\uffcd\052\uffcd\053\uffcd\056\uffcd\060\106\061\100" +
    "\062\077\063\102\064\073\065\110\072\uffcd\073\uffcd\074" +
    "\uffcd\075\uffcd\076\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd" +
    "\104\uffcd\105\075\107\uffcd\001\002\000\060\003\uffc6\050" +
    "\uffc6\052\uffc6\053\uffc6\056\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\072\uffc6\073\uffc6\074\uffc6\075" +
    "\uffc6\076\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6" +
    "\105\075\107\uffc6\001\002\000\060\003\uffcc\050\uffcc\052" +
    "\uffcc\053\uffcc\056\uffcc\060\106\061\100\062\077\063\102" +
    "\064\073\065\110\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076" +
    "\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\105\075" +
    "\107\uffcc\001\002\000\060\003\uffc9\050\uffc9\052\uffc9\053" +
    "\uffc9\056\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9" +
    "\065\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\100" +
    "\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\075\107\uffc9" +
    "\001\002\000\060\003\uffc7\050\uffc7\052\uffc7\053\uffc7\056" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\100\uffc7\101" +
    "\uffc7\102\uffc7\103\uffc7\104\uffc7\105\075\107\uffc7\001\002" +
    "\000\060\003\uffcf\050\uffcf\052\uffcf\053\uffcf\056\uffcf\060" +
    "\106\061\100\062\077\063\102\064\073\065\110\072\071" +
    "\073\104\074\uffcf\075\uffcf\076\uffcf\100\101\101\uffcf\102" +
    "\uffcf\103\103\104\105\105\075\107\uffcf\001\002\000\060" +
    "\003\uffc0\050\uffc0\052\uffc0\053\uffc0\056\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\072\uffc0\073\uffc0" +
    "\074\uffc0\075\uffc0\076\uffc0\100\uffc0\101\uffc0\102\uffc0\103" +
    "\uffc0\104\uffc0\105\uffc0\107\uffc0\001\002\000\060\003\uffce" +
    "\050\uffce\052\uffce\053\uffce\056\uffce\060\106\061\100\062" +
    "\077\063\102\064\073\065\110\072\071\073\104\074\uffce" +
    "\075\uffce\076\uffce\100\101\101\uffce\102\uffce\103\103\104" +
    "\105\105\075\107\uffce\001\002\000\060\003\uffc8\050\uffc8" +
    "\052\uffc8\053\uffc8\056\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\064\uffc8\065\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105" +
    "\075\107\uffc8\001\002\000\060\003\uffbf\050\uffbf\052\uffbf" +
    "\053\uffbf\056\uffbf\060\106\061\100\062\077\063\102\064" +
    "\073\065\110\072\071\073\104\074\uffbf\075\uffbf\076\uffbf" +
    "\100\101\101\uffbf\102\uffbf\103\103\104\105\105\075\107" +
    "\uffbf\001\002\000\060\003\uffc3\050\uffc3\052\uffc3\053\uffc3" +
    "\056\uffc3\060\106\061\100\062\077\063\102\064\073\065" +
    "\110\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\100\uffc3" +
    "\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\075\107\uffc3\001" +
    "\002\000\010\051\046\054\uffd6\056\uffd6\001\002\000\006" +
    "\054\uffd5\056\uffd5\001\002\000\046\050\136\060\106\061" +
    "\100\062\077\063\102\064\073\065\110\072\071\073\104" +
    "\074\111\075\107\076\072\100\101\101\076\102\074\103" +
    "\103\104\105\105\075\001\002\000\060\003\uffbc\050\uffbc" +
    "\052\uffbc\053\uffbc\056\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc" +
    "\076\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105" +
    "\uffbc\107\uffbc\001\002\000\060\003\uffc1\050\uffc1\052\uffc1" +
    "\053\uffc1\056\uffc1\060\106\061\100\062\077\063\102\064" +
    "\073\065\110\072\071\073\104\074\111\075\107\076\072" +
    "\100\101\101\076\102\074\103\103\104\105\105\075\107" +
    "\uffc1\001\002\000\060\003\uffba\050\uffba\052\uffba\053\uffba" +
    "\056\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\100\uffba" +
    "\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\107\uffba\001" +
    "\002\000\060\003\uffbb\050\uffbb\052\uffbb\053\uffbb\056\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\072" +
    "\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\100\uffbb\101\uffbb" +
    "\102\uffbb\103\uffbb\104\uffbb\105\uffbb\107\uffbb\001\002\000" +
    "\012\051\uffdc\053\uffdc\054\uffdc\056\uffdc\001\002\000\012" +
    "\051\uffd9\053\uffd9\054\uffd9\056\uffd9\001\002\000\012\051" +
    "\uffd8\053\uffd8\054\uffd8\056\uffd8\001\002\000\012\051\uffda" +
    "\053\uffda\054\uffda\056\uffda\001\002\000\020\003\153\034" +
    "\031\035\025\036\021\037\032\040\014\050\154\001\002" +
    "\000\026\002\uffa0\003\uffa0\006\uffa0\007\uffa0\034\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\046\uffa0\001\002\000\010" +
    "\003\163\050\uff99\053\162\001\002\000\006\010\037\046" +
    "\uffe0\001\002\000\004\056\156\001\002\000\004\056\uff9b" +
    "\001\002\000\004\056\uff9d\001\002\000\026\002\uff9e\003" +
    "\uff9e\006\uff9e\007\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\046\uff9e\001\002\000\004\057\157\001\002\000" +
    "\026\002\ufff6\003\ufff6\006\ufff6\007\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\046\ufff6\001\002\000\004\046" +
    "\161\001\002\000\010\003\uff94\050\uff94\053\uff94\001\002" +
    "\000\014\034\031\035\025\036\021\037\032\040\014\001" +
    "\002\000\010\003\uff95\050\uff95\053\uff95\001\002\000\010" +
    "\003\163\050\uff9a\053\162\001\002\000\004\050\167\001" +
    "\002\000\010\003\uff97\050\uff97\053\uff97\001\002\000\004" +
    "\056\uff9c\001\002\000\010\003\uff98\050\uff98\053\uff98\001" +
    "\002\000\010\003\uff96\050\uff96\053\uff96\001\002\000\034" +
    "\003\067\033\054\041\051\042\055\043\057\044\050\045" +
    "\066\046\056\047\060\066\053\077\064\102\052\106\200" +
    "\001\002\000\004\056\156\001\002\000\026\002\uffec\003" +
    "\uffec\006\uffec\007\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\046\uffec\001\002\000\004\056\uffd3\001\002\000" +
    "\004\056\uffd0\001\002\000\046\056\uffd1\060\106\061\100" +
    "\062\077\063\102\064\073\065\110\072\071\073\104\074" +
    "\111\075\107\076\072\100\101\101\076\102\074\103\103" +
    "\104\105\105\075\001\002\000\036\003\067\033\054\041" +
    "\051\042\055\043\057\044\050\045\066\046\056\047\060" +
    "\066\053\077\064\102\052\106\200\107\201\001\002\000" +
    "\012\003\uffae\053\uffae\056\uffae\107\uffae\001\002\000\052" +
    "\003\uffa5\053\215\060\106\061\100\062\077\063\102\064" +
    "\073\065\110\072\071\073\104\074\111\075\107\076\072" +
    "\100\101\101\076\102\074\103\103\104\105\105\075\107" +
    "\uffa5\001\002\000\006\003\214\107\212\001\002\000\006" +
    "\003\uffaa\107\uffaa\001\002\000\012\003\uffb0\053\uffb0\056" +
    "\uffb0\107\uffb0\001\002\000\010\003\uffa8\053\207\107\uffa8" +
    "\001\002\000\004\106\200\001\002\000\006\003\uffab\107" +
    "\uffab\001\002\000\006\003\uffa9\107\uffa9\001\002\000\012" +
    "\003\uffad\053\uffad\056\uffad\107\uffad\001\002\000\012\003" +
    "\uffaf\053\uffaf\056\uffaf\107\uffaf\001\002\000\012\003\uffac" +
    "\053\uffac\056\uffac\107\uffac\001\002\000\032\003\067\033" +
    "\054\041\051\042\055\043\057\044\050\045\066\046\056" +
    "\047\060\066\053\077\064\102\052\001\002\000\006\003" +
    "\uffa7\107\uffa7\001\002\000\006\003\uffa6\107\uffa6\001\002" +
    "\000\052\003\uffa5\053\215\060\106\061\100\062\077\063" +
    "\102\064\073\065\110\072\071\073\104\074\111\075\107" +
    "\076\072\100\101\101\076\102\074\103\103\104\105\105" +
    "\075\107\uffa5\001\002\000\006\003\uffa4\107\uffa4\001\002" +
    "\000\004\047\146\001\002\000\026\002\uffa1\003\uffa1\006" +
    "\uffa1\007\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\046\uffa1\001\002\000\026\002\ufff5\003\ufff5\006\ufff5\007" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\046\ufff5" +
    "\001\002\000\004\047\146\001\002\000\006\054\uffeb\056" +
    "\uffeb\001\002\000\026\002\uffa3\003\uffa3\006\uffa3\007\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\046\uffa3\001" +
    "\002\000\024\003\ufffe\006\ufffe\007\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\046\ufffe\001\002\000\024\003" +
    "\ufffb\006\ufffb\007\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\046\ufffb\001\002\000\024\003\ufffa\006\ufffa\007" +
    "\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\046\ufffa" +
    "\001\002\000\006\003\236\046\234\001\002\000\006\053" +
    "\ufff8\056\ufff8\001\002\000\006\053\237\056\156\001\002" +
    "\000\006\053\ufff7\056\ufff7\001\002\000\004\046\241\001" +
    "\002\000\024\003\ufffc\006\ufffc\007\ufffc\034\ufffc\035\ufffc" +
    "\036\ufffc\037\ufffc\040\ufffc\046\ufffc\001\002\000\006\053" +
    "\ufff9\056\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\003\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\227\006\230\001\001\000\002\001\001\000" +
    "\024\007\017\010\012\012\025\017\016\020\023\021\015" +
    "\022\021\024\032\033\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\225\022\021\024\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\223\012" +
    "\025\017\016\020\023\021\015\022\021\024\032\033\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\146\034\044\036\042\037\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\034\001\001\000\004\023" +
    "\035\001\001\000\004\033\040\001\001\000\002\001\001" +
    "\000\010\034\044\036\042\037\043\001\001\000\002\001" +
    "\001\000\004\040\144\001\001\000\004\037\141\001\001" +
    "\000\002\001\001\000\004\041\046\001\001\000\010\014" +
    "\064\042\061\044\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\064\044\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\064\044" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\064\044\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\064\044\131\001\001\000\006\014\064\044" +
    "\130\001\001\000\006\014\064\044\127\001\001\000\006" +
    "\014\064\044\126\001\001\000\006\014\064\044\125\001" +
    "\001\000\006\014\064\044\124\001\001\000\006\014\064" +
    "\044\123\001\001\000\006\014\064\044\122\001\001\000" +
    "\006\014\064\044\121\001\001\000\006\014\064\044\120" +
    "\001\001\000\006\014\064\044\117\001\001\000\006\014" +
    "\064\044\116\001\001\000\006\014\064\044\115\001\001" +
    "\000\006\014\064\044\114\001\001\000\006\014\064\044" +
    "\113\001\001\000\006\014\064\044\112\001\001\000\006" +
    "\014\064\044\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\150\026\151\032\147\001\001" +
    "\000\002\001\001\000\010\027\164\030\163\031\165\001" +
    "\001\000\004\023\157\001\001\000\004\006\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\150\032\170\001\001\000\002\001" +
    "\001\000\004\031\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\064\043\174\044\176\045\175\001\001" +
    "\000\004\006\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\064" +
    "\044\201\045\205\046\202\047\204\050\203\001\001\000" +
    "\002\001\001\000\004\051\215\001\001\000\004\054\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\207\001\001\000\004\045\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\064\044\217\052\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\220\001" +
    "\001\000\002\001\001\000\004\025\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\234\001\001\000" +
    "\002\001\001\000\004\006\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		private List<ReportError> listaErrores;
		private FunParser funParser = new FunParser();

	public Parser(Lexer lex){
		super(lex);
		listaErrores = new ArrayList<ReportError>();
	}
	 @Override
	public void syntax_error(Symbol cur_token){
			Token token = (Token) cur_token.value;
			/*			            
            String tokenEsperados = "Tokens esperados: ";
            tokenEsperados += listTokensEsperados();
			String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+cur_token.left+", Columna: "+ cur_token.right +" } " + tokenEsperados;
			listaErrores.add(msgError);
			*/

			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
			if(nombreSimbolo.equals("INVALID")){
				addError("Lexico",token,"No se esperaba: " + token.getLexema(),null);
			}else{
				if(token != null){
					addError("Sintactico",token,"No se esperaba: " + token.getLexema(),null);
				}else{
					token = new Token(nombreSimbolo,cur_token.left,cur_token.right);
					addError("Sintactico",token,"No se esperaba: " + nombreSimbolo,null);
				}
				
			}		

	}
	@Override
	public void report_fatal_error(String message, Object info){
			String Elerror = "Ocurrio un error no recuperable al analizar: " + message + " -> {objeto: " + info + "}";
			if(info instanceof Symbol ){
				Symbol sim = (Symbol) info;
				Token token = (Token) sim.value;
				addError("Sintactico",token,message,null);
			}else{
				System.out.println("Error -- :  " + message);
			}
	}
	 @Override
	public void report_error(String message, Object info){
			System.out.println("Error desde el report_error: " + message);
	}
	 @Override
	public void unrecovered_syntax_error(Symbol cur_token){
		report_fatal_error("No se puede reparar y analizar el Error sintactico", cur_token);
	}

	private void addError(String tipoError, Token token,String descError, String solucion){
		try{
			ReportError reporte = new ReportError();
			reporte.setTipoError(tipoError);
			reporte.setColumna(token.getColumna());
			reporte.setLinea(token.getLinea());
			if (solucion == null) {
                reporte.setSolucion(listTokensEsperados());
            }else{
                reporte.setSolucion(solucion);
            }
			reporte.setDescripcion(descError);
			listaErrores.add(reporte);
		}catch(Exception q){

		}

	}

	private String listTokensEsperados(){
		String tokenEsperados = "";
		for (Integer expected_token_id : expected_token_ids()) {
            	if(!symbl_name_from_id(expected_token_id).equals("error")){
            		String nameToken = funParser.nameTokenEsperado(symbl_name_from_id(expected_token_id));
            		if (nameToken == null){
            			tokenEsperados += symbl_name_from_id(expected_token_id).toLowerCase() + "\n";
            		}else{
            			tokenEsperados += nameToken + "\n";
            		}            		
            	}                
            }
        return tokenEsperados;
	}

	@Override
	protected int error_sync_size(){
		return 1;
	}
	public List getListaErrores(){
		return listaErrores;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= PISTA creacion_clase cont_inicio 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // creacion_clase ::= ID_VARIABLE creacion_clase_sig 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // creacion_clase ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // creacion_clase_sig ::= EXTIENDE otras_clases fin_instruccion_todo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase_sig",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // creacion_clase_sig ::= fin_instruccion_todo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase_sig",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // creacion_clase_sig ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase_sig",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // otras_clases ::= otras_clases COMA ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_clases",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // otras_clases ::= ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_clases",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // otras_clases ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_clases",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fin_instruccion_todo ::= SALTO TAB 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_instruccion_todo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cont_inicio ::= cont_inicio funciones_inicio 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_inicio",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cont_inicio ::= funciones_inicio 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_inicio",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funciones_inicio ::= declaracion_asignacion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_inicio",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funciones_inicio ::= procedimiento 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_inicio",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funciones ::= declaracion_asignacion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funciones ::= estruc_si 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funciones ::= funciones_especiales 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funciones ::= estruc_para 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funciones ::= estruc_mientras 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_asignacion ::= declaracion asignacion fin_instruccion_todo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_asignacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion ::= KEEP tipo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion ::= tipo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion ::= nombre_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= VAR tipo_variable arreglo nombre_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_variable ::= ID_ENTERO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_variable ::= ID_BOOLEAN 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_variable ::= ID_DOBLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_variable ::= ID_CARACTER 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_variable ::= ID_CADENA 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arreglo ::= ARREGLO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arreglo ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nombre_variable ::= ID_VARIABLE otras_variables es_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombre_variable",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // otras_variables ::= otra_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_variables",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // otras_variables ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_variables",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // otra_variable ::= otra_variable nombre_otra_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otra_variable",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // otra_variable ::= nombre_otra_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otra_variable",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // nombre_otra_variable ::= COMA id_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombre_otra_variable",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // id_variable ::= ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // id_variable ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // es_array ::= CORI sig_es_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("es_array",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // es_array ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("es_array",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sig_es_array ::= expr CORD es_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_es_array",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sig_es_array ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_es_array",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignacion ::= IGUAL tipo_datos 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignacion ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_datos ::= expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_datos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo_datos ::= asig_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_datos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr SUMA expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr MENOS expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr DIV expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr MULT expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr IGUALACION expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr DIFERENTE expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr MEN_QUE expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr MAY_QUE expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr MENQ expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr MAYQ expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr OR expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr NAND expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr AND expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= NOT expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= NULO expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr POTENCIA expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr XOR expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr NOR expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr MODULO expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= PAI expr PAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= MENOS ENTERO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= MENOS DECIMAL 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= ENTERO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= DECIMAL 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= CHAR 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= STRING 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= BOOLEAN 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= STRING_SIMPLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= funciones_especiales 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asig_array ::= LLAI sig_asig_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asig_array",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sig_asig_array ::= cont_asig_array fin_llave 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_asig_array",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sig_asig_array ::= LLAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_asig_array",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // fin_llave ::= LLAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_llave",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // fin_llave ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_llave",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cont_asig_array ::= asig_array sig_cont_asig_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_asig_array",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cont_asig_array ::= expr_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_asig_array",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sig_cont_asig_array ::= COMA asig_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_cont_asig_array",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sig_cont_asig_array ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_cont_asig_array",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr_array ::= expr mas_position_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_array",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // mas_position_array ::= COMA sig_position_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_position_array",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // mas_position_array ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_position_array",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sig_position_array ::= expr mas_position_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_position_array",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // procedimiento ::= KEEP sig_procedimiento 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // procedimiento ::= sig_procedimiento 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sig_procedimiento ::= tipo_variable ID_VARIABLE parametros 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_procedimiento",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sig_procedimiento ::= ID_VARIABLE parametros 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_procedimiento",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sig_procedimiento ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_procedimiento",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros ::= PAI sig_parametros fin_instruccion_todo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sig_parametros ::= PAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_parametros",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sig_parametros ::= declaracion_mini mas_parametros PAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_parametros",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sig_parametros ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_parametros",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // mas_parametros ::= varios_parametros 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // mas_parametros ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // varios_parametros ::= varios_parametros un_parametro 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_parametros",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // varios_parametros ::= un_parametro 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_parametros",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // un_parametro ::= COMA declaracion_mini 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_parametro",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // un_parametro ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_parametro",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declaracion_mini ::= tipo_variable arreglo ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_mini",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // estruc_si ::= si estruc_sino_si 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estruc_si",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // si ::= SI condicion cont_estruc_si 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("si",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condicion ::= PAI expr PAD SALTO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // condicion ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cont_estruc_si ::= cont_estruc_si cont_estruc_si_funcion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_estruc_si",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cont_estruc_si ::= cont_estruc_si_funcion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_estruc_si",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cont_estruc_si_funcion ::= TAB funciones 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_estruc_si_funcion",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
