
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.p1c2.ReglasGram.pistas;

import com.mycompany.p1c2.ReglasGram.Token;
import java_cup.runtime.*;
import com.mycompany.p1c2.ReglasGram.pistas.sym.*;
import com.mycompany.p1c2.ReglasGram.auxiliares.*;
import com.mycompany.p1c2.objetos.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\005\003\000\002\005\003\000\002\006\004\000\002" +
    "\011\003\000\002\012\003\000\002\012\002\000\002\007" +
    "\004\000\002\007\003\000\002\023\003\000\002\010\004" +
    "\000\002\010\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\004\000\002\024\004\000\002\024\003\000\002\024" +
    "\003\000\002\025\004\000\002\013\005\000\002\013\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\003\000\002" +
    "\027\002\000\002\042\005\000\002\043\003\000\002\043" +
    "\002\000\002\045\004\000\002\045\003\000\002\046\004" +
    "\000\002\047\003\000\002\047\003\000\002\050\004\000" +
    "\002\050\002\000\002\051\005\000\002\051\003\000\002" +
    "\044\004\000\002\044\002\000\002\052\003\000\002\052" +
    "\003\000\002\053\005\000\002\053\005\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\004\000\002\053\004\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\004\000\002\053\004\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\054\004\000" +
    "\002\056\004\000\002\056\003\000\002\063\003\000\002" +
    "\063\003\000\002\055\004\000\002\055\003\000\002\062" +
    "\004\000\002\062\002\000\002\057\004\000\002\060\004" +
    "\000\002\060\002\000\002\061\004\000\002\022\004\000" +
    "\002\022\003\000\002\033\005\000\002\033\004\000\002" +
    "\033\003\000\002\034\005\000\002\035\003\000\002\035" +
    "\005\000\002\035\003\000\002\030\003\000\002\030\002" +
    "\000\002\031\004\000\002\031\003\000\002\032\004\000" +
    "\002\036\003\000\002\036\002\000\002\037\004\000\002" +
    "\037\003\000\002\040\004\000\002\040\003\000\002\041" +
    "\005\000\002\016\004\000\002\064\006\000\002\065\006" +
    "\000\002\065\003\000\002\066\004\000\002\066\003\000" +
    "\002\067\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\006\003\004\004\005\001\002\000\004\002" +
    "\uffff\001\002\000\006\003\011\046\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\000\001\002\000\010\003" +
    "\270\005\271\056\164\001\002\000\024\003\ufffd\006\ufffd" +
    "\007\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\046" +
    "\ufffd\001\002\000\024\003\031\006\016\007\035\034\032" +
    "\035\026\036\021\037\033\040\014\046\030\001\002\000" +
    "\026\002\ufff0\003\ufff0\006\ufff0\007\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\040\ufff0\046\ufff0\001\002\000\006\010" +
    "\uffdd\046\uffdd\001\002\000\034\002\uffe6\003\uffe6\006\uffe6" +
    "\007\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\046" +
    "\uffe6\054\uffe6\056\uffe6\057\uffe6\001\002\000\022\003\031" +
    "\007\035\034\032\035\026\036\021\037\033\040\014\046" +
    "\264\001\002\000\026\002\uffee\003\uffee\006\uffee\007\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\046\uffee\001" +
    "\002\000\026\002\001\003\031\006\016\007\035\034\032" +
    "\035\026\036\021\037\033\040\014\046\030\001\002\000" +
    "\006\010\uffdf\046\uffdf\001\002\000\004\046\261\001\002" +
    "\000\034\002\uffe5\003\uffe5\006\uffe5\007\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\046\uffe5\054\uffe5\056\uffe5" +
    "\057\uffe5\001\002\000\026\002\ufff1\003\ufff1\006\ufff1\007" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\046\ufff1" +
    "\001\002\000\034\002\uffcd\003\uffcd\006\uffcd\007\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\046\uffcd\054\232" +
    "\056\uffcd\057\uffcd\001\002\000\006\010\uffe0\046\uffe0\001" +
    "\002\000\004\056\164\001\002\000\014\047\151\051\uffd8" +
    "\053\045\054\uffd8\056\uffd8\001\002\000\026\002\uff9a\003" +
    "\uff9a\006\uff9a\007\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\046\uff9a\001\002\000\006\010\uffe1\046\uffe1\001" +
    "\002\000\006\010\uffde\046\uffde\001\002\000\026\002\uff9d" +
    "\003\uff9d\006\uff9d\007\uff9d\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\046\uff9d\001\002\000\016\003\037\034\032" +
    "\035\026\036\021\037\033\040\014\001\002\000\034\002" +
    "\uffe4\003\uffe4\006\uffe4\007\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\046\uffe4\054\uffe4\056\uffe4\057\uffe4\001" +
    "\002\000\034\002\uffe2\003\uffe2\006\uffe2\007\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\046\uffe2\054\uffe2\056" +
    "\uffe2\057\uffe2\001\002\000\006\010\042\046\uffdb\001\002" +
    "\000\004\046\043\001\002\000\004\046\uffdc\001\002\000" +
    "\040\002\uffd8\003\uffd8\006\uffd8\007\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\046\uffd8\051\uffd8\053\045\054" +
    "\uffd8\056\uffd8\057\uffd8\001\002\000\034\002\uffe3\003\uffe3" +
    "\006\uffe3\007\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\046\uffe3\054\uffe3\056\uffe3\057\uffe3\001\002\000\006" +
    "\003\147\046\146\001\002\000\040\002\uffd9\003\uffd9\006" +
    "\uffd9\007\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\046\uffd9\051\uffd9\053\045\054\uffd9\056\uffd9\057\uffd9\001" +
    "\002\000\040\002\uffd6\003\uffd6\006\uffd6\007\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\046\uffd6\051\uffd6\053" +
    "\uffd6\054\uffd6\056\uffd6\057\uffd6\001\002\000\036\002\uffd1" +
    "\003\uffd1\006\uffd1\007\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\046\uffd1\051\051\054\uffd1\056\uffd1\057\uffd1" +
    "\001\002\000\032\003\064\033\057\041\054\042\060\043" +
    "\062\044\053\045\071\046\061\047\063\066\056\077\067" +
    "\102\055\001\002\000\034\002\uffda\003\uffda\006\uffda\007" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\046\uffda" +
    "\054\uffda\056\uffda\057\uffda\001\002\000\104\002\uffae\003" +
    "\uffae\006\uffae\007\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\046\uffae\050\uffae\052\uffae\053\uffae\056\uffae\057" +
    "\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae" +
    "\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae\100\uffae\101" +
    "\uffae\102\uffae\103\uffae\104\uffae\105\uffae\107\uffae\001\002" +
    "\000\104\002\uffb3\003\uffb3\006\uffb3\007\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\046\uffb3\050\uffb3\052\uffb3" +
    "\053\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105" +
    "\uffb3\107\uffb3\001\002\000\006\041\143\042\144\001\002" +
    "\000\032\003\072\033\057\041\054\042\060\043\062\044" +
    "\053\045\071\046\061\047\063\066\056\077\067\102\055" +
    "\001\002\000\104\002\uffb0\003\uffb0\006\uffb0\007\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\046\uffb0\050\uffb0" +
    "\052\uffb0\053\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\uffb0\072\uffb0\073\uffb0\074\uffb0" +
    "\075\uffb0\076\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104" +
    "\uffb0\105\uffb0\107\uffb0\001\002\000\104\002\uffb4\003\uffb4" +
    "\006\uffb4\007\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\046\uffb4\050\uffb4\052\uffb4\053\uffb4\056\uffb4\057\uffb4" +
    "\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\072" +
    "\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\100\uffb4\101\uffb4" +
    "\102\uffb4\103\uffb4\104\uffb4\105\uffb4\107\uffb4\001\002\000" +
    "\104\002\uffaf\003\uffaf\006\uffaf\007\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\046\uffaf\050\uffaf\052\uffaf\053" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\065\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076" +
    "\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf" +
    "\107\uffaf\001\002\000\104\002\uffb1\003\uffb1\006\uffb1\007" +
    "\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\046\uffb1" +
    "\050\uffb1\052\uffb1\053\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\072\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\076\uffb1\100\uffb1\101\uffb1\102\uffb1\103" +
    "\uffb1\104\uffb1\105\uffb1\107\uffb1\001\002\000\032\003\072" +
    "\033\057\041\054\042\060\043\062\044\053\045\071\046" +
    "\061\047\063\066\056\077\067\102\055\001\002\000\100" +
    "\002\uffcf\003\uffcf\006\uffcf\007\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\046\uffcf\052\uffac\054\uffcf\056\uffcf" +
    "\057\uffcf\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065" +
    "\uffac\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac\100\uffac" +
    "\101\uffac\102\uffac\103\uffac\104\uffac\105\uffac\001\002\000" +
    "\034\002\uffd2\003\uffd2\006\uffd2\007\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\046\uffd2\054\uffd2\056\uffd2\057" +
    "\uffd2\001\002\000\046\052\136\060\111\061\103\062\102" +
    "\063\105\064\076\065\113\072\074\073\107\074\114\075" +
    "\112\076\075\100\104\101\101\102\077\103\106\104\110" +
    "\105\100\001\002\000\032\003\072\033\057\041\054\042" +
    "\060\043\062\044\053\045\071\046\061\047\063\066\056" +
    "\077\067\102\055\001\002\000\104\002\uffad\003\uffad\006" +
    "\uffad\007\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\046\uffad\050\uffad\052\uffad\053\uffad\056\uffad\057\uffad\060" +
    "\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\072\uffad" +
    "\073\uffad\074\uffad\075\uffad\076\uffad\100\uffad\101\uffad\102" +
    "\uffad\103\uffad\104\uffad\105\uffad\107\uffad\001\002\000\104" +
    "\002\uffb2\003\uffb2\006\uffb2\007\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\046\uffb2\050\uffb2\052\uffb2\053\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\107" +
    "\uffb2\001\002\000\104\002\uffac\003\uffac\006\uffac\007\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\046\uffac\050" +
    "\uffac\052\uffac\053\uffac\056\uffac\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\063\uffac\064\uffac\065\uffac\072\uffac\073\uffac\074" +
    "\uffac\075\uffac\076\uffac\100\uffac\101\uffac\102\uffac\103\uffac" +
    "\104\uffac\105\uffac\107\uffac\001\002\000\104\002\uffbd\003" +
    "\uffbd\006\uffbd\007\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\046\uffbd\050\uffbd\052\uffbd\053\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd" +
    "\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\100\uffbd\101" +
    "\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\107\uffbd\001\002" +
    "\000\032\003\072\033\057\041\054\042\060\043\062\044" +
    "\053\045\071\046\061\047\063\066\056\077\067\102\055" +
    "\001\002\000\032\003\072\033\057\041\054\042\060\043" +
    "\062\044\053\045\071\046\061\047\063\066\056\077\067" +
    "\102\055\001\002\000\032\003\072\033\057\041\054\042" +
    "\060\043\062\044\053\045\071\046\061\047\063\066\056" +
    "\077\067\102\055\001\002\000\032\003\072\033\057\041" +
    "\054\042\060\043\062\044\053\045\071\046\061\047\063" +
    "\066\056\077\067\102\055\001\002\000\032\003\072\033" +
    "\057\041\054\042\060\043\062\044\053\045\071\046\061" +
    "\047\063\066\056\077\067\102\055\001\002\000\032\003" +
    "\072\033\057\041\054\042\060\043\062\044\053\045\071" +
    "\046\061\047\063\066\056\077\067\102\055\001\002\000" +
    "\032\003\072\033\057\041\054\042\060\043\062\044\053" +
    "\045\071\046\061\047\063\066\056\077\067\102\055\001" +
    "\002\000\032\003\072\033\057\041\054\042\060\043\062" +
    "\044\053\045\071\046\061\047\063\066\056\077\067\102" +
    "\055\001\002\000\032\003\072\033\057\041\054\042\060" +
    "\043\062\044\053\045\071\046\061\047\063\066\056\077" +
    "\067\102\055\001\002\000\032\003\072\033\057\041\054" +
    "\042\060\043\062\044\053\045\071\046\061\047\063\066" +
    "\056\077\067\102\055\001\002\000\032\003\072\033\057" +
    "\041\054\042\060\043\062\044\053\045\071\046\061\047" +
    "\063\066\056\077\067\102\055\001\002\000\032\003\072" +
    "\033\057\041\054\042\060\043\062\044\053\045\071\046" +
    "\061\047\063\066\056\077\067\102\055\001\002\000\032" +
    "\003\072\033\057\041\054\042\060\043\062\044\053\045" +
    "\071\046\061\047\063\066\056\077\067\102\055\001\002" +
    "\000\032\003\072\033\057\041\054\042\060\043\062\044" +
    "\053\045\071\046\061\047\063\066\056\077\067\102\055" +
    "\001\002\000\032\003\072\033\057\041\054\042\060\043" +
    "\062\044\053\045\071\046\061\047\063\066\056\077\067" +
    "\102\055\001\002\000\032\003\072\033\057\041\054\042" +
    "\060\043\062\044\053\045\071\046\061\047\063\066\056" +
    "\077\067\102\055\001\002\000\032\003\072\033\057\041" +
    "\054\042\060\043\062\044\053\045\071\046\061\047\063" +
    "\066\056\077\067\102\055\001\002\000\104\002\uffc0\003" +
    "\uffc0\006\uffc0\007\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\046\uffc0\050\uffc0\052\uffc0\053\uffc0\056\uffc0\057" +
    "\uffc0\060\111\061\103\062\102\063\105\064\076\065\113" +
    "\072\074\073\107\074\uffc0\075\uffc0\076\uffc0\100\104\101" +
    "\uffc0\102\uffc0\103\106\104\110\105\100\107\uffc0\001\002" +
    "\000\104\002\uffc5\003\uffc5\006\uffc5\007\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\046\uffc5\050\uffc5\052\uffc5" +
    "\053\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5" +
    "\076\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105" +
    "\100\107\uffc5\001\002\000\104\002\uffb9\003\uffb9\006\uffb9" +
    "\007\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\046" +
    "\uffb9\050\uffb9\052\uffb9\053\uffb9\056\uffb9\057\uffb9\060\111" +
    "\061\103\062\102\063\105\064\076\065\113\072\074\073" +
    "\107\074\uffb9\075\uffb9\076\uffb9\100\104\101\uffb9\102\uffb9" +
    "\103\106\104\110\105\100\107\uffb9\001\002\000\104\002" +
    "\uffc6\003\uffc6\006\uffc6\007\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\046\uffc6\050\uffc6\052\uffc6\053\uffc6\056" +
    "\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\065\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\100" +
    "\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\100\107\uffc6" +
    "\001\002\000\104\002\uffb8\003\uffb8\006\uffb8\007\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\046\uffb8\050\uffb8" +
    "\052\uffb8\053\uffb8\056\uffb8\057\uffb8\060\111\061\103\062" +
    "\102\063\105\064\076\065\113\072\uffb8\073\uffb8\074\uffb8" +
    "\075\uffb8\076\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104" +
    "\uffb8\105\100\107\uffb8\001\002\000\104\002\uffbf\003\uffbf" +
    "\006\uffbf\007\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\046\uffbf\050\uffbf\052\uffbf\053\uffbf\056\uffbf\057\uffbf" +
    "\060\111\061\103\062\102\063\105\064\076\065\113\072" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\100\uffbf\101\uffbf" +
    "\102\uffbf\103\uffbf\104\uffbf\105\100\107\uffbf\001\002\000" +
    "\104\002\uffc8\003\uffc8\006\uffc8\007\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\046\uffc8\050\uffc8\052\uffc8\053" +
    "\uffc8\056\uffc8\057\uffc8\060\111\061\103\062\102\063\105" +
    "\064\076\065\113\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\100" +
    "\107\uffc8\001\002\000\104\002\uffc1\003\uffc1\006\uffc1\007" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\046\uffc1" +
    "\050\uffc1\052\uffc1\053\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\072\uffc1\073\uffc1" +
    "\074\uffc1\075\uffc1\076\uffc1\100\uffc1\101\uffc1\102\uffc1\103" +
    "\uffc1\104\uffc1\105\100\107\uffc1\001\002\000\104\002\uffc7" +
    "\003\uffc7\006\uffc7\007\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\046\uffc7\050\uffc7\052\uffc7\053\uffc7\056\uffc7" +
    "\057\uffc7\060\111\061\103\062\102\063\105\064\076\065" +
    "\113\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\100\uffc7" +
    "\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105\100\107\uffc7\001" +
    "\002\000\104\002\uffc4\003\uffc4\006\uffc4\007\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\046\uffc4\050\uffc4\052" +
    "\uffc4\053\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\072\uffc4\073\uffc4\074\uffc4\075" +
    "\uffc4\076\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4" +
    "\105\100\107\uffc4\001\002\000\104\002\uffc2\003\uffc2\006" +
    "\uffc2\007\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\046\uffc2\050\uffc2\052\uffc2\053\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\072\uffc2" +
    "\073\uffc2\074\uffc2\075\uffc2\076\uffc2\100\uffc2\101\uffc2\102" +
    "\uffc2\103\uffc2\104\uffc2\105\100\107\uffc2\001\002\000\104" +
    "\002\uffca\003\uffca\006\uffca\007\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\046\uffca\050\uffca\052\uffca\053\uffca" +
    "\056\uffca\057\uffca\060\111\061\103\062\102\063\105\064" +
    "\076\065\113\072\074\073\107\074\uffca\075\uffca\076\uffca" +
    "\100\104\101\uffca\102\uffca\103\106\104\110\105\100\107" +
    "\uffca\001\002\000\104\002\uffbb\003\uffbb\006\uffbb\007\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\046\uffbb\050" +
    "\uffbb\052\uffbb\053\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\064\uffbb\065\uffbb\072\uffbb\073\uffbb\074" +
    "\uffbb\075\uffbb\076\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb" +
    "\104\uffbb\105\uffbb\107\uffbb\001\002\000\104\002\uffc9\003" +
    "\uffc9\006\uffc9\007\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\046\uffc9\050\uffc9\052\uffc9\053\uffc9\056\uffc9\057" +
    "\uffc9\060\111\061\103\062\102\063\105\064\076\065\113" +
    "\072\074\073\107\074\uffc9\075\uffc9\076\uffc9\100\104\101" +
    "\uffc9\102\uffc9\103\106\104\110\105\100\107\uffc9\001\002" +
    "\000\104\002\uffc3\003\uffc3\006\uffc3\007\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\046\uffc3\050\uffc3\052\uffc3" +
    "\053\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105" +
    "\100\107\uffc3\001\002\000\104\002\uffba\003\uffba\006\uffba" +
    "\007\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\046" +
    "\uffba\050\uffba\052\uffba\053\uffba\056\uffba\057\uffba\060\111" +
    "\061\103\062\102\063\105\064\076\065\113\072\074\073" +
    "\107\074\uffba\075\uffba\076\uffba\100\104\101\uffba\102\uffba" +
    "\103\106\104\110\105\100\107\uffba\001\002\000\104\002" +
    "\uffbe\003\uffbe\006\uffbe\007\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\046\uffbe\050\uffbe\052\uffbe\053\uffbe\056" +
    "\uffbe\057\uffbe\060\111\061\103\062\102\063\105\064\076" +
    "\065\113\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\100" +
    "\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\100\107\uffbe" +
    "\001\002\000\036\002\uffd1\003\uffd1\006\uffd1\007\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\046\uffd1\051\051" +
    "\054\uffd1\056\uffd1\057\uffd1\001\002\000\034\002\uffd0\003" +
    "\uffd0\006\uffd0\007\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\046\uffd0\054\uffd0\056\uffd0\057\uffd0\001\002\000" +
    "\046\050\141\060\111\061\103\062\102\063\105\064\076" +
    "\065\113\072\074\073\107\074\114\075\112\076\075\100" +
    "\104\101\101\102\077\103\106\104\110\105\100\001\002" +
    "\000\104\002\uffb7\003\uffb7\006\uffb7\007\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\046\uffb7\050\uffb7\052\uffb7" +
    "\053\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\065\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7" +
    "\076\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105" +
    "\uffb7\107\uffb7\001\002\000\104\002\uffbc\003\uffbc\006\uffbc" +
    "\007\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\046" +
    "\uffbc\050\uffbc\052\uffbc\053\uffbc\056\uffbc\057\uffbc\060\111" +
    "\061\103\062\102\063\105\064\076\065\113\072\074\073" +
    "\107\074\114\075\112\076\075\100\104\101\101\102\077" +
    "\103\106\104\110\105\100\107\uffbc\001\002\000\104\002" +
    "\uffb5\003\uffb5\006\uffb5\007\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\046\uffb5\050\uffb5\052\uffb5\053\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\100" +
    "\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\107\uffb5" +
    "\001\002\000\104\002\uffb6\003\uffb6\006\uffb6\007\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\046\uffb6\050\uffb6" +
    "\052\uffb6\053\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062" +
    "\uffb6\063\uffb6\064\uffb6\065\uffb6\072\uffb6\073\uffb6\074\uffb6" +
    "\075\uffb6\076\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104" +
    "\uffb6\105\uffb6\107\uffb6\001\002\000\040\002\uffd7\003\uffd7" +
    "\006\uffd7\007\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\046\uffd7\051\uffd7\053\uffd7\054\uffd7\056\uffd7\057\uffd7" +
    "\001\002\000\040\002\uffd4\003\uffd4\006\uffd4\007\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\046\uffd4\051\uffd4" +
    "\053\uffd4\054\uffd4\056\uffd4\057\uffd4\001\002\000\040\002" +
    "\uffd3\003\uffd3\006\uffd3\007\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\046\uffd3\051\uffd3\053\uffd3\054\uffd3\056" +
    "\uffd3\057\uffd3\001\002\000\040\002\uffd5\003\uffd5\006\uffd5" +
    "\007\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\046" +
    "\uffd5\051\uffd5\053\uffd5\054\uffd5\056\uffd5\057\uffd5\001\002" +
    "\000\020\003\156\034\032\035\026\036\021\037\033\040" +
    "\014\050\157\001\002\000\026\002\uff9b\003\uff9b\006\uff9b" +
    "\007\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\046" +
    "\uff9b\001\002\000\006\010\042\046\uffdb\001\002\000\010" +
    "\003\220\050\uff8f\053\217\001\002\000\030\002\uff94\003" +
    "\uff94\006\uff94\007\uff94\034\uff94\035\uff94\036\uff94\037\uff94" +
    "\040\uff94\046\uff94\056\164\001\002\000\030\002\uff96\003" +
    "\uff96\006\uff96\007\uff96\034\uff96\035\uff96\036\uff96\037\uff96" +
    "\040\uff96\046\uff96\056\uff96\001\002\000\030\002\uff98\003" +
    "\uff98\006\uff98\007\uff98\034\uff98\035\uff98\036\uff98\037\uff98" +
    "\040\uff98\046\uff98\056\uff98\001\002\000\004\057\167\001" +
    "\002\000\026\002\uff99\003\uff99\006\uff99\007\uff99\034\uff99" +
    "\035\uff99\036\uff99\037\uff99\040\uff99\046\uff99\001\002\000" +
    "\030\002\uff95\003\uff95\006\uff95\007\uff95\034\uff95\035\uff95" +
    "\036\uff95\037\uff95\040\uff95\046\uff95\056\164\001\002\000" +
    "\030\002\uff92\003\uff92\006\uff92\007\uff92\034\uff92\035\uff92" +
    "\036\uff92\037\uff92\040\uff92\046\uff92\056\uff92\001\002\000" +
    "\004\057\165\001\002\000\030\002\ufff6\003\ufff6\006\ufff6" +
    "\007\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\046" +
    "\ufff6\057\ufff6\001\002\000\030\002\uff93\003\uff93\006\uff93" +
    "\007\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\046" +
    "\uff93\056\uff93\001\002\000\012\006\177\007\035\011\200" +
    "\046\043\001\002\000\030\002\uff91\003\uff91\006\uff91\007" +
    "\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\046\uff91" +
    "\056\uff91\001\002\000\032\002\uffea\003\uffea\006\uffea\007" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\046\uffea" +
    "\056\uffea\057\uffea\001\002\000\032\002\uffe9\003\uffe9\006" +
    "\uffe9\007\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\046\uffe9\056\uffe9\057\uffe9\001\002\000\002\001\002\000" +
    "\032\002\uff83\003\uff83\006\uff83\007\uff83\034\uff83\035\uff83" +
    "\036\uff83\037\uff83\040\uff83\046\uff83\056\uff83\057\uff83\001" +
    "\002\000\032\002\uffed\003\uffed\006\uffed\007\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\046\uffed\056\uffed\057" +
    "\uffed\001\002\000\032\002\uffeb\003\uffeb\006\uffeb\007\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\046\uffeb\056" +
    "\uffeb\057\uffeb\001\002\000\004\007\035\001\002\000\006" +
    "\003\203\047\202\001\002\000\032\002\uffec\003\uffec\006" +
    "\uffec\007\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\046\uffec\056\uffec\057\uffec\001\002\000\032\003\072\033" +
    "\057\041\054\042\060\043\062\044\053\045\071\046\061" +
    "\047\063\066\056\077\067\102\055\001\002\000\004\057" +
    "\uff86\001\002\000\004\057\167\001\002\000\006\056\211" +
    "\057\167\001\002\000\006\056\uff84\057\uff84\001\002\000" +
    "\002\001\002\000\006\056\uff85\057\uff85\001\002\000\004" +
    "\057\ufff5\001\002\000\046\050\213\060\111\061\103\062" +
    "\102\063\105\064\076\065\113\072\074\073\107\074\114" +
    "\075\112\076\075\100\104\101\101\102\077\103\106\104" +
    "\110\105\100\001\002\000\004\056\211\001\002\000\004" +
    "\057\uff87\001\002\000\034\002\uffe7\003\uffe7\006\uffe7\007" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\046\uffe7" +
    "\054\uffe7\056\uffe7\057\uffe7\001\002\000\032\002\uff89\003" +
    "\uff89\006\uff89\007\uff89\034\uff89\035\uff89\036\uff89\037\uff89" +
    "\040\uff89\046\uff89\056\uff89\057\uff89\001\002\000\014\034" +
    "\032\035\026\036\021\037\033\040\014\001\002\000\010" +
    "\003\uff8b\050\uff8b\053\uff8b\001\002\000\010\003\220\050" +
    "\uff90\053\217\001\002\000\004\050\224\001\002\000\010" +
    "\003\uff8d\050\uff8d\053\uff8d\001\002\000\030\002\uff97\003" +
    "\uff97\006\uff97\007\uff97\034\uff97\035\uff97\036\uff97\037\uff97" +
    "\040\uff97\046\uff97\056\uff97\001\002\000\010\003\uff8e\050" +
    "\uff8e\053\uff8e\001\002\000\010\003\uff8c\050\uff8c\053\uff8c" +
    "\001\002\000\004\046\230\001\002\000\010\003\uff8a\050" +
    "\uff8a\053\uff8a\001\002\000\026\002\uffef\003\uffef\006\uffef" +
    "\007\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\046" +
    "\uffef\001\002\000\034\003\072\033\057\041\054\042\060" +
    "\043\062\044\053\045\071\046\061\047\063\066\056\077" +
    "\067\102\055\106\237\001\002\000\032\002\uffe8\003\uffe8" +
    "\006\uffe8\007\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\046\uffe8\056\uffe8\057\uffe8\001\002\000\032\002\uffce" +
    "\003\uffce\006\uffce\007\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\046\uffce\056\uffce\057\uffce\001\002\000\032" +
    "\002\uffcb\003\uffcb\006\uffcb\007\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\046\uffcb\056\uffcb\057\uffcb\001\002" +
    "\000\074\002\uffcc\003\uffcc\006\uffcc\007\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\046\uffcc\056\uffcc\057\uffcc" +
    "\060\111\061\103\062\102\063\105\064\076\065\113\072" +
    "\074\073\107\074\114\075\112\076\075\100\104\101\101" +
    "\102\077\103\106\104\110\105\100\001\002\000\036\003" +
    "\072\033\057\041\054\042\060\043\062\044\053\045\071" +
    "\046\061\047\063\066\056\077\067\102\055\106\237\107" +
    "\240\001\002\000\036\002\uffa9\003\uffa9\006\uffa9\007\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\046\uffa9\053" +
    "\uffa9\056\uffa9\057\uffa9\107\uffa9\001\002\000\052\003\uffa0" +
    "\053\254\060\111\061\103\062\102\063\105\064\076\065" +
    "\113\072\074\073\107\074\114\075\112\076\075\100\104" +
    "\101\101\102\077\103\106\104\110\105\100\107\uffa0\001" +
    "\002\000\006\003\253\107\251\001\002\000\006\003\uffa5" +
    "\107\uffa5\001\002\000\036\002\uffab\003\uffab\006\uffab\007" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\046\uffab" +
    "\053\uffab\056\uffab\057\uffab\107\uffab\001\002\000\010\003" +
    "\uffa3\053\246\107\uffa3\001\002\000\004\106\237\001\002" +
    "\000\006\003\uffa6\107\uffa6\001\002\000\006\003\uffa4\107" +
    "\uffa4\001\002\000\036\002\uffa8\003\uffa8\006\uffa8\007\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\046\uffa8\053" +
    "\uffa8\056\uffa8\057\uffa8\107\uffa8\001\002\000\036\002\uffaa" +
    "\003\uffaa\006\uffaa\007\uffaa\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\046\uffaa\053\uffaa\056\uffaa\057\uffaa\107\uffaa" +
    "\001\002\000\036\002\uffa7\003\uffa7\006\uffa7\007\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\046\uffa7\053\uffa7" +
    "\056\uffa7\057\uffa7\107\uffa7\001\002\000\032\003\072\033" +
    "\057\041\054\042\060\043\062\044\053\045\071\046\061" +
    "\047\063\066\056\077\067\102\055\001\002\000\006\003" +
    "\uffa2\107\uffa2\001\002\000\006\003\uffa1\107\uffa1\001\002" +
    "\000\052\003\uffa0\053\254\060\111\061\103\062\102\063" +
    "\105\064\076\065\113\072\074\073\107\074\114\075\112" +
    "\076\075\100\104\101\101\102\077\103\106\104\110\105" +
    "\100\107\uffa0\001\002\000\006\003\uff9f\107\uff9f\001\002" +
    "\000\004\047\151\001\002\000\026\002\uff9c\003\uff9c\006" +
    "\uff9c\007\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\046\uff9c\001\002\000\026\002\ufff2\003\ufff2\006\ufff2\007" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\046\ufff2" +
    "\001\002\000\004\047\151\001\002\000\026\002\uff9e\003" +
    "\uff9e\006\uff9e\007\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\046\uff9e\001\002\000\024\003\ufffe\006\ufffe\007" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\046\ufffe" +
    "\001\002\000\024\003\ufffb\006\ufffb\007\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\046\ufffb\001\002\000\024" +
    "\003\ufffa\006\ufffa\007\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\046\ufffa\001\002\000\006\003\274\046\272" +
    "\001\002\000\006\053\ufff8\056\ufff8\001\002\000\006\053" +
    "\275\056\164\001\002\000\006\053\ufff7\056\ufff7\001\002" +
    "\000\004\046\277\001\002\000\024\003\ufffc\006\ufffc\007" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\046\ufffc" +
    "\001\002\000\006\053\ufff9\056\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\003\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\265\006\266\001\001\000\002\001\001\000" +
    "\026\007\017\010\012\015\026\022\016\023\023\024\024" +
    "\025\014\026\021\033\033\042\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\214" +
    "\026\021\033\264\001\001\000\002\001\001\000\024\010" +
    "\012\015\026\022\016\023\262\024\024\025\014\026\021" +
    "\033\033\042\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\232" +
    "\001\001\000\002\001\001\000\004\006\230\001\001\000" +
    "\012\034\151\043\047\045\045\046\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\035\026\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\040\001\001\000\004\042" +
    "\043\001\001\000\002\001\001\000\010\043\047\045\045" +
    "\046\046\001\001\000\002\001\001\000\004\047\147\001" +
    "\001\000\004\046\144\001\001\000\002\001\001\000\004" +
    "\050\051\001\001\000\010\017\067\051\064\053\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\067\053\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\067\053\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\067" +
    "\053\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\067\053\134" +
    "\001\001\000\006\017\067\053\133\001\001\000\006\017" +
    "\067\053\132\001\001\000\006\017\067\053\131\001\001" +
    "\000\006\017\067\053\130\001\001\000\006\017\067\053" +
    "\127\001\001\000\006\017\067\053\126\001\001\000\006" +
    "\017\067\053\125\001\001\000\006\017\067\053\124\001" +
    "\001\000\006\017\067\053\123\001\001\000\006\017\067" +
    "\053\122\001\001\000\006\017\067\053\121\001\001\000" +
    "\006\017\067\053\120\001\001\000\006\017\067\053\117" +
    "\001\001\000\006\017\067\053\116\001\001\000\006\017" +
    "\067\053\115\001\001\000\006\017\067\053\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\152\035\154\041\153\001\001\000\002\001\001\000\004" +
    "\027\226\001\001\000\010\036\221\037\220\040\222\001" +
    "\001\000\012\006\157\030\160\031\161\032\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\167\001" +
    "\001\000\002\001\001\000\006\006\157\032\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\173\015\174\016\200\017\175" +
    "\020\170\021\171\024\024\025\014\042\022\064\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\214\001\001\000\004" +
    "\065\203\001\001\000\002\001\001\000\006\017\067\053" +
    "\211\001\001\000\002\001\001\000\006\066\204\067\205" +
    "\001\001\000\006\011\206\067\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\152" +
    "\041\225\001\001\000\002\001\001\000\004\040\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\067\052\233" +
    "\053\235\054\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\067" +
    "\053\240\054\244\055\241\056\243\057\242\001\001\000" +
    "\002\001\001\000\004\060\254\001\001\000\004\063\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\246\001\001\000\004\054\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\067\053\256\061\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\257\001" +
    "\001\000\002\001\001\000\004\034\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\272\001\001\000\002\001\001\000" +
    "\004\006\275\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		private List<ReportError> listaErrores;
		private FunParser funParser = new FunParser();

	public Parser(Lexer lex){
		super(lex);
		listaErrores = new ArrayList<ReportError>();
	}
	 @Override
	public void syntax_error(Symbol cur_token){
			Token token = (Token) cur_token.value;			
			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
			if(nombreSimbolo.equals("INVALID")){
				addError("Lexico",token,"No se esperaba: " + token.getLexema(),null);
			}else{
				if(token != null){
					String nameToken = funParser.nameTokenNoEsperado(nombreSimbolo);
					if(nameToken == null){
						addError("Sintactico",token,"No se esperaba: " + token.getLexema(),null);
					}else{
						addError("Sintactico",token,"No se esperaba: " + nameToken,null);
					}					
				}else{
					token = new Token(nombreSimbolo,cur_token.left,cur_token.right);
					addError("Sintactico",token,"No se esperaba: " + nombreSimbolo,null);
				}
				
			}		

	}
	@Override
	public void report_fatal_error(String message, Object info){
			String Elerror = "Ocurrio un error no recuperable al analizar: " + message + " -> {objeto: " + info + "}";
			if(info instanceof Symbol ){
				Symbol sim = (Symbol) info;
				Token token = (Token) sim.value;
				if(token == null){
					token = new Token("report_fatal_error",sim.left,sim.right);
				}
				addError("Sintactico",token,message,null);
			}else{
				System.out.println("Error -- :  " + message);
			}
	}
	 @Override
	public void report_error(String message, Object info){
			System.out.println("Error desde el report_error: " + message);
	}
	 @Override
	public void unrecovered_syntax_error(Symbol cur_token){
		report_fatal_error("No se puede reparar y analizar el Error sintactico", cur_token);
	}

	private void addError(String tipoError, Token token,String descError, String solucion){
		try{
			ReportError reporte = new ReportError();
			reporte.setTipoError(tipoError);
			reporte.setColumna(token.getColumna());
			reporte.setLinea(token.getLinea());
			if (solucion == null) {
                reporte.setSolucion(listTokensEsperados());
            }else{
                reporte.setSolucion(solucion);
            }
			reporte.setDescripcion(descError);
			listaErrores.add(reporte);
		}catch(Exception q){

		}

	}

	private String listTokensEsperados(){
		String tokenEsperados = "";
		for (Integer expected_token_id : expected_token_ids()) {
            	if(!symbl_name_from_id(expected_token_id).equals("error")){
            		String nameToken = funParser.nameTokenEsperado(symbl_name_from_id(expected_token_id));
            		if (nameToken == null){
            			tokenEsperados += symbl_name_from_id(expected_token_id).toLowerCase() + "\n";
            		}else{
            			tokenEsperados += nameToken + "\n";
            		}            		
            	}                
            }
        return tokenEsperados;
	}

	@Override
	protected int error_sync_size(){
		return 1;
	}
	public List getListaErrores(){
		return listaErrores;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= PISTA creacion_clase cont_inicio 
            {
              Token RESULT =null;
		
					System.out.println("FFFFFFFFFFFFFFFFFFFFFFFFFFFF");
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // creacion_clase ::= ID_VARIABLE creacion_clase_sig 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // creacion_clase ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // creacion_clase_sig ::= EXTIENDE otras_clases fin_instruccion_todo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase_sig",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // creacion_clase_sig ::= fin_instruccion_todo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase_sig",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // creacion_clase_sig ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase_sig",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // otras_clases ::= otras_clases COMA ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_clases",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // otras_clases ::= ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_clases",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // otras_clases ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_clases",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fin_instruccion_todo ::= SALTO TAB 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_instruccion_todo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fin_instruccion ::= SALTO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_instruccion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fin_instruccion_talvez ::= SALTO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_instruccion_talvez",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fin_instruccion_talvez ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_instruccion_talvez",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cont_inicio ::= cont_inicio funciones_inicio_tab 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_inicio",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cont_inicio ::= funciones_inicio_tab 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_inicio",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funciones_inicio_tab ::= funciones_inicio 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_inicio_tab",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funciones_inicio ::= declaracion_asignacion fin_instruccion_todo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_inicio",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funciones_inicio ::= procedimiento 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_inicio",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funciones ::= declaracion_asignacion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funciones ::= estruc_si 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funciones ::= funciones_especiales 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funciones ::= estruc_para 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funciones ::= estruc_mientras 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_asignacion ::= declaracion asignacion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion ::= KEEP tipo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion ::= tipo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion ::= nombre_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= VAR sig_tipo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sig_tipo ::= tipo_variable arreglo nombre_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_tipo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sig_tipo ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_tipo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_variable ::= ID_ENTERO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_variable ::= ID_BOOLEAN 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_variable ::= ID_DOBLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_variable ::= ID_CARACTER 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_variable ::= ID_CADENA 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arreglo ::= ARREGLO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arreglo ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // nombre_variable ::= ID_VARIABLE otras_variables es_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombre_variable",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // otras_variables ::= otra_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_variables",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // otras_variables ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_variables",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // otra_variable ::= otra_variable nombre_otra_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otra_variable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // otra_variable ::= nombre_otra_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otra_variable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nombre_otra_variable ::= COMA id_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombre_otra_variable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // id_variable ::= ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_variable",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // id_variable ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_variable",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // es_array ::= CORI sig_es_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("es_array",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // es_array ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("es_array",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sig_es_array ::= expr CORD es_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_es_array",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sig_es_array ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_es_array",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion ::= IGUAL tipo_datos 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_datos ::= expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_datos",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_datos ::= asig_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_datos",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr SUMA expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr MENOS expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr DIV expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr MULT expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr IGUALACION expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr DIFERENTE expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr MEN_QUE expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr MAY_QUE expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr MENQ expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr MAYQ expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr OR expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr NAND expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr AND expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= NOT expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= NULO expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr POTENCIA expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr XOR expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr NOR expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr MODULO expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= PAI expr PAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= MENOS ENTERO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= MENOS DECIMAL 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= ENTERO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= DECIMAL 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= CHAR 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= STRING 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= BOOLEAN 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= STRING_SIMPLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= funciones_especiales 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asig_array ::= LLAI sig_asig_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asig_array",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sig_asig_array ::= cont_asig_array fin_llave 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_asig_array",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sig_asig_array ::= LLAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_asig_array",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fin_llave ::= LLAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_llave",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // fin_llave ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_llave",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cont_asig_array ::= asig_array sig_cont_asig_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_asig_array",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cont_asig_array ::= expr_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_asig_array",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sig_cont_asig_array ::= COMA asig_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_cont_asig_array",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sig_cont_asig_array ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_cont_asig_array",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr_array ::= expr mas_position_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_array",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // mas_position_array ::= COMA sig_position_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_position_array",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // mas_position_array ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_position_array",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sig_position_array ::= expr mas_position_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_position_array",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // procedimiento ::= KEEP sig_procedimiento 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // procedimiento ::= sig_procedimiento 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sig_procedimiento ::= tipo_variable ID_VARIABLE parametros 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_procedimiento",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sig_procedimiento ::= ID_VARIABLE parametros 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_procedimiento",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sig_procedimiento ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_procedimiento",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros ::= PAI sig_parametros cont_procedimiento 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sig_parametros ::= PAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_parametros",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sig_parametros ::= declaracion_mini mas_parametros PAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_parametros",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sig_parametros ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_parametros",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cont_procedimiento ::= cont_procedimiento_funciones 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_procedimiento",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cont_procedimiento ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_procedimiento",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cont_procedimiento_funciones ::= cont_procedimiento_funciones cont_procedimiento_funcion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_procedimiento_funciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cont_procedimiento_funciones ::= cont_procedimiento_funcion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_procedimiento_funciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cont_procedimiento_funcion ::= fin_instruccion_todo cont_estruc_si_funcion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_procedimiento_funcion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // mas_parametros ::= varios_parametros 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // mas_parametros ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // varios_parametros ::= varios_parametros un_parametro 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_parametros",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // varios_parametros ::= un_parametro 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_parametros",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // un_parametro ::= COMA declaracion_mini 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_parametro",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // un_parametro ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_parametro",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // declaracion_mini ::= tipo_variable arreglo ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_mini",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // estruc_si ::= si estruc_sino_si 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estruc_si",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // si ::= SI condicion cont_estruc_si fin_instruccion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("si",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // condicion ::= PAI expr PAD fin_instruccion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // condicion ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // cont_estruc_si ::= cont_estruc_si cont_estruc_si_funcion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_estruc_si",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cont_estruc_si ::= cont_estruc_si_funcion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_estruc_si",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cont_estruc_si_funcion ::= TAB funciones 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_estruc_si_funcion",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
