
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.p1c2.ReglasGram.pistas;

import com.mycompany.p1c2.ReglasGram.Token;
import java_cup.runtime.*;
import com.mycompany.p1c2.ReglasGram.pistas.sym.*;
import com.mycompany.p1c2.ReglasGram.auxiliares.*;
import com.mycompany.p1c2.objetos.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\005\003\000\002\005\003\000\002\006\004\000\002" +
    "\012\003\000\002\013\003\000\002\013\002\000\002\007" +
    "\004\000\002\007\003\000\002\025\004\000\002\010\004" +
    "\000\002\010\003\000\002\011\004\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\017\004\000\002" +
    "\026\004\000\002\026\003\000\002\026\003\000\002\027" +
    "\004\000\002\014\005\000\002\014\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\003\000\002\031\002\000\002" +
    "\044\005\000\002\045\003\000\002\045\002\000\002\047" +
    "\004\000\002\047\003\000\002\050\004\000\002\051\003" +
    "\000\002\051\003\000\002\052\004\000\002\052\002\000" +
    "\002\053\005\000\002\053\003\000\002\046\004\000\002" +
    "\046\002\000\002\054\003\000\002\054\003\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\004\000\002\055\004\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\004\000\002\055\004\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\056\004\000\002\060\004\000" +
    "\002\060\003\000\002\065\003\000\002\065\003\000\002" +
    "\057\004\000\002\057\003\000\002\064\004\000\002\064" +
    "\002\000\002\061\004\000\002\062\004\000\002\062\002" +
    "\000\002\063\004\000\002\024\004\000\002\024\003\000" +
    "\002\035\005\000\002\035\004\000\002\035\003\000\002" +
    "\036\005\000\002\037\003\000\002\037\005\000\002\037" +
    "\003\000\002\032\003\000\002\032\002\000\002\033\004" +
    "\000\002\033\003\000\002\034\004\000\002\040\003\000" +
    "\002\040\002\000\002\041\004\000\002\041\003\000\002" +
    "\042\004\000\002\042\003\000\002\043\005\000\002\020" +
    "\004\000\002\066\005\000\002\067\005\000\002\067\003" +
    "\000\002\073\003\000\002\073\002\000\002\070\004\000" +
    "\002\070\003\000\002\071\005\000\002\074\003\000\002" +
    "\074\004\000\002\075\003\000\002\072\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\006\003\004\004\005\001\002\000\004\002" +
    "\uffff\001\002\000\006\003\011\046\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\000\001\002\000\010\003" +
    "\275\005\276\056\235\001\002\000\004\057\ufffd\001\002" +
    "\000\004\057\013\001\002\000\024\003\030\006\035\007" +
    "\025\034\020\035\026\036\021\037\034\040\036\046\024" +
    "\001\002\000\006\002\ufff1\057\ufff1\001\002\000\006\002" +
    "\001\057\013\001\002\000\006\002\ufff2\057\ufff2\001\002" +
    "\000\004\046\272\001\002\000\006\010\uffe2\046\uffe2\001" +
    "\002\000\006\010\uffe0\046\uffe0\001\002\000\012\002\uffe6" +
    "\054\uffe6\056\uffe6\057\uffe6\001\002\000\006\002\uffee\057" +
    "\uffee\001\002\000\014\047\043\051\uffd9\053\200\054\uffd9" +
    "\056\uffd9\001\002\000\016\003\266\034\020\035\026\036" +
    "\021\037\034\040\036\001\002\000\006\010\uffe1\046\uffe1" +
    "\001\002\000\012\002\uffce\054\236\056\uffce\057\uffce\001" +
    "\002\000\006\002\uff9b\057\uff9b\001\002\000\012\002\uffe7" +
    "\054\uffe7\056\uffe7\057\uffe7\001\002\000\004\056\235\001" +
    "\002\000\006\002\ufff0\057\ufff0\001\002\000\006\010\uffdf" +
    "\046\uffdf\001\002\000\022\003\030\007\025\034\020\035" +
    "\026\036\021\037\034\040\036\046\040\001\002\000\006" +
    "\010\uffde\046\uffde\001\002\000\006\002\uff9e\057\uff9e\001" +
    "\002\000\004\047\043\001\002\000\012\002\uffe8\054\uffe8" +
    "\056\uffe8\057\uffe8\001\002\000\006\002\uff9f\057\uff9f\001" +
    "\002\000\020\003\050\034\020\035\026\036\021\037\034" +
    "\040\036\050\051\001\002\000\006\002\uff9c\057\uff9c\001" +
    "\002\000\006\010\232\046\uffdc\001\002\000\010\003\222" +
    "\050\uff90\053\221\001\002\000\010\002\uff95\056\056\057" +
    "\uff95\001\002\000\010\002\uff97\056\uff97\057\uff97\001\002" +
    "\000\010\002\uff99\056\uff99\057\uff99\001\002\000\004\057" +
    "\062\001\002\000\010\002\uff93\056\uff93\057\uff93\001\002" +
    "\000\006\002\uff9a\057\uff9a\001\002\000\010\002\uff96\056" +
    "\056\057\uff96\001\002\000\004\057\057\001\002\000\004" +
    "\057\ufff6\001\002\000\010\002\uff94\056\uff94\057\uff94\001" +
    "\002\000\010\002\uff92\056\uff92\057\uff92\001\002\000\012" +
    "\006\071\007\025\011\072\046\065\001\002\000\010\002" +
    "\uffea\056\uffea\057\uffea\001\002\000\004\057\217\001\002" +
    "\000\016\002\uffd9\051\uffd9\053\200\054\uffd9\056\uffd9\057" +
    "\uffd9\001\002\000\010\002\uffed\056\uffed\057\uffed\001\002" +
    "\000\010\002\uffec\056\uffec\057\uffec\001\002\000\010\002" +
    "\uffeb\056\uffeb\057\uffeb\001\002\000\004\007\025\001\002" +
    "\000\006\003\074\047\073\001\002\000\032\003\122\033" +
    "\116\041\112\042\115\043\117\044\111\045\126\046\120" +
    "\047\121\066\114\077\124\102\113\001\002\000\006\056" +
    "\uff87\057\uff87\001\002\000\006\056\056\057\uff85\001\002" +
    "\000\006\056\056\057\uff86\001\002\000\004\057\uff89\001" +
    "\002\000\004\057\102\001\002\000\006\056\uff83\057\uff83" +
    "\001\002\000\006\012\105\057\062\001\002\000\006\056" +
    "\uff82\057\uff82\001\002\000\006\056\uff81\057\uff81\001\002" +
    "\000\004\011\072\001\002\000\006\056\uff80\057\uff80\001" +
    "\002\000\006\056\uff7f\057\uff7f\001\002\000\006\056\uff84" +
    "\057\uff84\001\002\000\064\002\uffaf\003\uffaf\050\uffaf\052" +
    "\uffaf\053\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\072\uffaf\073\uffaf\074\uffaf\075" +
    "\uffaf\076\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf" +
    "\105\uffaf\107\uffaf\001\002\000\064\002\uffb4\003\uffb4\050" +
    "\uffb4\052\uffb4\053\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\065\uffb4\072\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4" +
    "\104\uffb4\105\uffb4\107\uffb4\001\002\000\006\041\176\042" +
    "\177\001\002\000\032\003\122\033\116\041\112\042\115" +
    "\043\117\044\111\045\126\046\120\047\121\066\114\077" +
    "\124\102\113\001\002\000\064\002\uffb5\003\uffb5\050\uffb5" +
    "\052\uffb5\053\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\065\uffb5\072\uffb5\073\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104" +
    "\uffb5\105\uffb5\107\uffb5\001\002\000\064\002\uffb1\003\uffb1" +
    "\050\uffb1\052\uffb1\053\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\072\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\076\uffb1\100\uffb1\101\uffb1\102\uffb1\103" +
    "\uffb1\104\uffb1\105\uffb1\107\uffb1\001\002\000\064\002\uffb2" +
    "\003\uffb2\050\uffb2\052\uffb2\053\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\072\uffb2" +
    "\073\uffb2\074\uffb2\075\uffb2\076\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\103\uffb2\104\uffb2\105\uffb2\107\uffb2\001\002\000\064" +
    "\002\uffb0\003\uffb0\050\uffb0\052\uffb0\053\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0" +
    "\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\100\uffb0\101" +
    "\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\107\uffb0\001\002" +
    "\000\032\003\122\033\116\041\112\042\115\043\117\044" +
    "\111\045\126\046\120\047\121\066\114\077\124\102\113" +
    "\001\002\000\064\002\uffad\003\uffad\050\uffad\052\uffad\053" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\uffad\065\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076" +
    "\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105\uffad" +
    "\107\uffad\001\002\000\046\050\172\060\145\061\137\062" +
    "\136\063\141\064\132\065\146\072\130\073\144\074\150" +
    "\075\147\076\131\100\140\101\135\102\134\103\142\104" +
    "\143\105\133\001\002\000\032\003\122\033\116\041\112" +
    "\042\115\043\117\044\111\045\126\046\120\047\121\066" +
    "\114\077\124\102\113\001\002\000\064\002\uffae\003\uffae" +
    "\050\uffae\052\uffae\053\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\065\uffae\072\uffae\073\uffae" +
    "\074\uffae\075\uffae\076\uffae\100\uffae\101\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\107\uffae\001\002\000\064\002\uffb3" +
    "\003\uffb3\050\uffb3\052\uffb3\053\uffb3\056\uffb3\057\uffb3\060" +
    "\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\072\uffb3" +
    "\073\uffb3\074\uffb3\075\uffb3\076\uffb3\100\uffb3\101\uffb3\102" +
    "\uffb3\103\uffb3\104\uffb3\105\uffb3\107\uffb3\001\002\000\064" +
    "\002\uffbe\003\uffbe\050\uffbe\052\uffbe\053\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\100\uffbe\101" +
    "\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\107\uffbe\001\002" +
    "\000\032\003\122\033\116\041\112\042\115\043\117\044" +
    "\111\045\126\046\120\047\121\066\114\077\124\102\113" +
    "\001\002\000\032\003\122\033\116\041\112\042\115\043" +
    "\117\044\111\045\126\046\120\047\121\066\114\077\124" +
    "\102\113\001\002\000\032\003\122\033\116\041\112\042" +
    "\115\043\117\044\111\045\126\046\120\047\121\066\114" +
    "\077\124\102\113\001\002\000\032\003\122\033\116\041" +
    "\112\042\115\043\117\044\111\045\126\046\120\047\121" +
    "\066\114\077\124\102\113\001\002\000\032\003\122\033" +
    "\116\041\112\042\115\043\117\044\111\045\126\046\120" +
    "\047\121\066\114\077\124\102\113\001\002\000\032\003" +
    "\122\033\116\041\112\042\115\043\117\044\111\045\126" +
    "\046\120\047\121\066\114\077\124\102\113\001\002\000" +
    "\032\003\122\033\116\041\112\042\115\043\117\044\111" +
    "\045\126\046\120\047\121\066\114\077\124\102\113\001" +
    "\002\000\032\003\122\033\116\041\112\042\115\043\117" +
    "\044\111\045\126\046\120\047\121\066\114\077\124\102" +
    "\113\001\002\000\032\003\122\033\116\041\112\042\115" +
    "\043\117\044\111\045\126\046\120\047\121\066\114\077" +
    "\124\102\113\001\002\000\032\003\122\033\116\041\112" +
    "\042\115\043\117\044\111\045\126\046\120\047\121\066" +
    "\114\077\124\102\113\001\002\000\032\003\122\033\116" +
    "\041\112\042\115\043\117\044\111\045\126\046\120\047" +
    "\121\066\114\077\124\102\113\001\002\000\032\003\122" +
    "\033\116\041\112\042\115\043\117\044\111\045\126\046" +
    "\120\047\121\066\114\077\124\102\113\001\002\000\032" +
    "\003\122\033\116\041\112\042\115\043\117\044\111\045" +
    "\126\046\120\047\121\066\114\077\124\102\113\001\002" +
    "\000\032\003\122\033\116\041\112\042\115\043\117\044" +
    "\111\045\126\046\120\047\121\066\114\077\124\102\113" +
    "\001\002\000\032\003\122\033\116\041\112\042\115\043" +
    "\117\044\111\045\126\046\120\047\121\066\114\077\124" +
    "\102\113\001\002\000\032\003\122\033\116\041\112\042" +
    "\115\043\117\044\111\045\126\046\120\047\121\066\114" +
    "\077\124\102\113\001\002\000\032\003\122\033\116\041" +
    "\112\042\115\043\117\044\111\045\126\046\120\047\121" +
    "\066\114\077\124\102\113\001\002\000\064\002\uffc1\003" +
    "\uffc1\050\uffc1\052\uffc1\053\uffc1\056\uffc1\057\uffc1\060\145" +
    "\061\137\062\136\063\141\064\132\065\146\072\130\073" +
    "\144\074\uffc1\075\uffc1\076\uffc1\100\140\101\uffc1\102\uffc1" +
    "\103\142\104\143\105\133\107\uffc1\001\002\000\064\002" +
    "\uffba\003\uffba\050\uffba\052\uffba\053\uffba\056\uffba\057\uffba" +
    "\060\145\061\137\062\136\063\141\064\132\065\146\072" +
    "\130\073\144\074\uffba\075\uffba\076\uffba\100\140\101\uffba" +
    "\102\uffba\103\142\104\143\105\133\107\uffba\001\002\000" +
    "\064\002\uffc6\003\uffc6\050\uffc6\052\uffc6\053\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\100\uffc6" +
    "\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\133\107\uffc6\001" +
    "\002\000\064\002\uffc7\003\uffc7\050\uffc7\052\uffc7\053\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7" +
    "\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105\133\107" +
    "\uffc7\001\002\000\064\002\uffc0\003\uffc0\050\uffc0\052\uffc0" +
    "\053\uffc0\056\uffc0\057\uffc0\060\145\061\137\062\136\063" +
    "\141\064\132\065\146\072\uffc0\073\uffc0\074\uffc0\075\uffc0" +
    "\076\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105" +
    "\133\107\uffc0\001\002\000\064\002\uffb9\003\uffb9\050\uffb9" +
    "\052\uffb9\053\uffb9\056\uffb9\057\uffb9\060\145\061\137\062" +
    "\136\063\141\064\132\065\146\072\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104" +
    "\uffb9\105\133\107\uffb9\001\002\000\064\002\uffc9\003\uffc9" +
    "\050\uffc9\052\uffc9\053\uffc9\056\uffc9\057\uffc9\060\145\061" +
    "\137\062\136\063\141\064\132\065\146\072\uffc9\073\uffc9" +
    "\074\uffc9\075\uffc9\076\uffc9\100\uffc9\101\uffc9\102\uffc9\103" +
    "\uffc9\104\uffc9\105\133\107\uffc9\001\002\000\064\002\uffc2" +
    "\003\uffc2\050\uffc2\052\uffc2\053\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\072\uffc2" +
    "\073\uffc2\074\uffc2\075\uffc2\076\uffc2\100\uffc2\101\uffc2\102" +
    "\uffc2\103\uffc2\104\uffc2\105\133\107\uffc2\001\002\000\064" +
    "\002\uffc8\003\uffc8\050\uffc8\052\uffc8\053\uffc8\056\uffc8\057" +
    "\uffc8\060\145\061\137\062\136\063\141\064\132\065\146" +
    "\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\100\uffc8\101" +
    "\uffc8\102\uffc8\103\uffc8\104\uffc8\105\133\107\uffc8\001\002" +
    "\000\064\002\uffc5\003\uffc5\050\uffc5\052\uffc5\053\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5" +
    "\065\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\100" +
    "\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\133\107\uffc5" +
    "\001\002\000\064\002\uffc3\003\uffc3\050\uffc3\052\uffc3\053" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\064\uffc3\065\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\133" +
    "\107\uffc3\001\002\000\064\002\uffcb\003\uffcb\050\uffcb\052" +
    "\uffcb\053\uffcb\056\uffcb\057\uffcb\060\145\061\137\062\136" +
    "\063\141\064\132\065\146\072\130\073\144\074\uffcb\075" +
    "\uffcb\076\uffcb\100\140\101\uffcb\102\uffcb\103\142\104\143" +
    "\105\133\107\uffcb\001\002\000\064\002\uffca\003\uffca\050" +
    "\uffca\052\uffca\053\uffca\056\uffca\057\uffca\060\145\061\137" +
    "\062\136\063\141\064\132\065\146\072\130\073\144\074" +
    "\uffca\075\uffca\076\uffca\100\140\101\uffca\102\uffca\103\142" +
    "\104\143\105\133\107\uffca\001\002\000\064\002\uffbc\003" +
    "\uffbc\050\uffbc\052\uffbc\053\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\072\uffbc\073" +
    "\uffbc\074\uffbc\075\uffbc\076\uffbc\100\uffbc\101\uffbc\102\uffbc" +
    "\103\uffbc\104\uffbc\105\uffbc\107\uffbc\001\002\000\064\002" +
    "\uffc4\003\uffc4\050\uffc4\052\uffc4\053\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\072" +
    "\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\100\uffc4\101\uffc4" +
    "\102\uffc4\103\uffc4\104\uffc4\105\133\107\uffc4\001\002\000" +
    "\064\002\uffbb\003\uffbb\050\uffbb\052\uffbb\053\uffbb\056\uffbb" +
    "\057\uffbb\060\145\061\137\062\136\063\141\064\132\065" +
    "\146\072\130\073\144\074\uffbb\075\uffbb\076\uffbb\100\140" +
    "\101\uffbb\102\uffbb\103\142\104\143\105\133\107\uffbb\001" +
    "\002\000\064\002\uffbf\003\uffbf\050\uffbf\052\uffbf\053\uffbf" +
    "\056\uffbf\057\uffbf\060\145\061\137\062\136\063\141\064" +
    "\132\065\146\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf" +
    "\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\133\107" +
    "\uffbf\001\002\000\006\056\uff88\057\uff88\001\002\000\046" +
    "\050\174\060\145\061\137\062\136\063\141\064\132\065" +
    "\146\072\130\073\144\074\150\075\147\076\131\100\140" +
    "\101\135\102\134\103\142\104\143\105\133\001\002\000" +
    "\064\002\uffb8\003\uffb8\050\uffb8\052\uffb8\053\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\100\uffb8" +
    "\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\107\uffb8\001" +
    "\002\000\064\002\uffbd\003\uffbd\050\uffbd\052\uffbd\053\uffbd" +
    "\056\uffbd\057\uffbd\060\145\061\137\062\136\063\141\064" +
    "\132\065\146\072\130\073\144\074\150\075\147\076\131" +
    "\100\140\101\135\102\134\103\142\104\143\105\133\107" +
    "\uffbd\001\002\000\064\002\uffb6\003\uffb6\050\uffb6\052\uffb6" +
    "\053\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\065\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6" +
    "\076\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105" +
    "\uffb6\107\uffb6\001\002\000\064\002\uffb7\003\uffb7\050\uffb7" +
    "\052\uffb7\053\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\072\uffb7\073\uffb7\074\uffb7" +
    "\075\uffb7\076\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104" +
    "\uffb7\105\uffb7\107\uffb7\001\002\000\006\003\215\046\214" +
    "\001\002\000\016\002\uffda\051\uffda\053\200\054\uffda\056" +
    "\uffda\057\uffda\001\002\000\016\002\uffd7\051\uffd7\053\uffd7" +
    "\054\uffd7\056\uffd7\057\uffd7\001\002\000\014\002\uffd2\051" +
    "\204\054\uffd2\056\uffd2\057\uffd2\001\002\000\032\003\206" +
    "\033\116\041\112\042\115\043\117\044\111\045\126\046" +
    "\120\047\121\066\114\077\124\102\113\001\002\000\012" +
    "\002\uffdb\054\uffdb\056\uffdb\057\uffdb\001\002\000\056\002" +
    "\uffd0\052\uffad\054\uffd0\056\uffd0\057\uffd0\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\064\uffad\065\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\076\uffad\100\uffad\101\uffad\102\uffad\103\uffad" +
    "\104\uffad\105\uffad\001\002\000\012\002\uffd3\054\uffd3\056" +
    "\uffd3\057\uffd3\001\002\000\046\052\211\060\145\061\137" +
    "\062\136\063\141\064\132\065\146\072\130\073\144\074" +
    "\150\075\147\076\131\100\140\101\135\102\134\103\142" +
    "\104\143\105\133\001\002\000\014\002\uffd2\051\204\054" +
    "\uffd2\056\uffd2\057\uffd2\001\002\000\012\002\uffd1\054\uffd1" +
    "\056\uffd1\057\uffd1\001\002\000\016\002\uffd8\051\uffd8\053" +
    "\uffd8\054\uffd8\056\uffd8\057\uffd8\001\002\000\016\002\uffd5" +
    "\051\uffd5\053\uffd5\054\uffd5\056\uffd5\057\uffd5\001\002\000" +
    "\016\002\uffd4\051\uffd4\053\uffd4\054\uffd4\056\uffd4\057\uffd4" +
    "\001\002\000\016\002\uffd6\051\uffd6\053\uffd6\054\uffd6\056" +
    "\uffd6\057\uffd6\001\002\000\010\002\uff7e\056\uff7e\057\uff7e" +
    "\001\002\000\010\002\uff8a\056\uff8a\057\uff8a\001\002\000" +
    "\014\034\020\035\026\036\021\037\034\040\036\001\002" +
    "\000\010\003\uff8c\050\uff8c\053\uff8c\001\002\000\010\003" +
    "\222\050\uff91\053\221\001\002\000\004\050\226\001\002" +
    "\000\010\003\uff8e\050\uff8e\053\uff8e\001\002\000\010\002" +
    "\uff98\056\uff98\057\uff98\001\002\000\010\003\uff8f\050\uff8f" +
    "\053\uff8f\001\002\000\010\003\uff8d\050\uff8d\053\uff8d\001" +
    "\002\000\004\046\233\001\002\000\004\046\uffdd\001\002" +
    "\000\010\003\uff8b\050\uff8b\053\uff8b\001\002\000\006\002" +
    "\uffef\057\uffef\001\002\000\006\002\ufff5\057\ufff5\001\002" +
    "\000\034\003\122\033\116\041\112\042\115\043\117\044" +
    "\111\045\126\046\120\047\121\066\114\077\124\102\113" +
    "\106\243\001\002\000\010\002\uffe9\056\uffe9\057\uffe9\001" +
    "\002\000\010\002\uffcf\056\uffcf\057\uffcf\001\002\000\010" +
    "\002\uffcc\056\uffcc\057\uffcc\001\002\000\052\002\uffcd\056" +
    "\uffcd\057\uffcd\060\145\061\137\062\136\063\141\064\132" +
    "\065\146\072\130\073\144\074\150\075\147\076\131\100" +
    "\140\101\135\102\134\103\142\104\143\105\133\001\002" +
    "\000\036\003\122\033\116\041\112\042\115\043\117\044" +
    "\111\045\126\046\120\047\121\066\114\077\124\102\113" +
    "\106\243\107\244\001\002\000\016\002\uffaa\003\uffaa\053" +
    "\uffaa\056\uffaa\057\uffaa\107\uffaa\001\002\000\052\003\uffa1" +
    "\053\260\060\145\061\137\062\136\063\141\064\132\065" +
    "\146\072\130\073\144\074\150\075\147\076\131\100\140" +
    "\101\135\102\134\103\142\104\143\105\133\107\uffa1\001" +
    "\002\000\006\003\257\107\255\001\002\000\006\003\uffa6" +
    "\107\uffa6\001\002\000\016\002\uffac\003\uffac\053\uffac\056" +
    "\uffac\057\uffac\107\uffac\001\002\000\010\003\uffa4\053\252" +
    "\107\uffa4\001\002\000\004\106\243\001\002\000\006\003" +
    "\uffa7\107\uffa7\001\002\000\006\003\uffa5\107\uffa5\001\002" +
    "\000\016\002\uffa9\003\uffa9\053\uffa9\056\uffa9\057\uffa9\107" +
    "\uffa9\001\002\000\016\002\uffab\003\uffab\053\uffab\056\uffab" +
    "\057\uffab\107\uffab\001\002\000\016\002\uffa8\003\uffa8\053" +
    "\uffa8\056\uffa8\057\uffa8\107\uffa8\001\002\000\032\003\122" +
    "\033\116\041\112\042\115\043\117\044\111\045\126\046" +
    "\120\047\121\066\114\077\124\102\113\001\002\000\006" +
    "\003\uffa3\107\uffa3\001\002\000\006\003\uffa2\107\uffa2\001" +
    "\002\000\052\003\uffa1\053\260\060\145\061\137\062\136" +
    "\063\141\064\132\065\146\072\130\073\144\074\150\075" +
    "\147\076\131\100\140\101\135\102\134\103\142\104\143" +
    "\105\133\107\uffa1\001\002\000\006\003\uffa0\107\uffa0\001" +
    "\002\000\012\002\uffe5\054\uffe5\056\uffe5\057\uffe5\001\002" +
    "\000\012\002\uffe3\054\uffe3\056\uffe3\057\uffe3\001\002\000" +
    "\006\010\232\046\uffdc\001\002\000\004\046\065\001\002" +
    "\000\012\002\uffe4\054\uffe4\056\uffe4\057\uffe4\001\002\000" +
    "\004\047\043\001\002\000\006\002\uff9d\057\uff9d\001\002" +
    "\000\004\057\ufffe\001\002\000\004\057\ufffa\001\002\000" +
    "\006\003\302\046\300\001\002\000\004\057\ufffb\001\002" +
    "\000\006\053\ufff8\056\ufff8\001\002\000\006\053\303\056" +
    "\235\001\002\000\006\053\ufff7\056\ufff7\001\002\000\004" +
    "\046\305\001\002\000\004\057\ufffc\001\002\000\006\053" +
    "\ufff9\056\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\003\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\273\012\276\001\001\000\002\001\001\000" +
    "\006\007\014\025\013\001\001\000\022\010\032\017\031" +
    "\024\022\026\026\027\030\030\016\035\036\044\021\001" +
    "\001\000\002\001\001\000\004\025\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\036\043" +
    "\045\202\047\200\050\201\001\001\000\006\014\264\030" +
    "\266\001\001\000\002\001\001\000\004\046\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\027\040" +
    "\030\016\035\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\044\037\046\043\045\001\001\000" +
    "\002\001\001\000\004\031\230\001\001\000\010\040\223" +
    "\041\222\042\224\001\001\000\012\006\051\032\053\033" +
    "\054\034\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\051\034\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\062\016\065\017\066\020\067\026\026\027\030" +
    "\044\021\066\063\001\001\000\002\001\001\000\004\072" +
    "\217\001\001\000\010\045\202\047\200\050\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\040\001\001\000\004\067\074\001\001\000\006" +
    "\021\124\055\122\001\001\000\002\001\001\000\012\006" +
    "\077\070\075\071\100\073\076\001\001\000\006\006\077" +
    "\071\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\103\074\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\106\066\063\075" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\124\055\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\124\055\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\124\055\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\124" +
    "\055\170\001\001\000\006\021\124\055\167\001\001\000" +
    "\006\021\124\055\166\001\001\000\006\021\124\055\165" +
    "\001\001\000\006\021\124\055\164\001\001\000\006\021" +
    "\124\055\163\001\001\000\006\021\124\055\162\001\001" +
    "\000\006\021\124\055\161\001\001\000\006\021\124\055" +
    "\160\001\001\000\006\021\124\055\157\001\001\000\006" +
    "\021\124\055\156\001\001\000\006\021\124\055\155\001" +
    "\001\000\006\021\124\055\154\001\001\000\006\021\124" +
    "\055\153\001\001\000\006\021\124\055\152\001\001\000" +
    "\006\021\124\055\151\001\001\000\006\021\124\055\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\215\001\001\000\004\050\212" +
    "\001\001\000\002\001\001\000\004\052\204\001\001\000" +
    "\010\021\124\053\206\055\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\044\043\227" +
    "\001\001\000\002\001\001\000\004\042\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\124\054\237\055\241\056\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\021\124\055\244\056\250\057\245\060" +
    "\247\061\246\001\001\000\002\001\001\000\004\062\260" +
    "\001\001\000\004\065\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\252\001\001\000\004\056\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\124" +
    "\055\262\063\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\267\001\001\000" +
    "\004\044\270\001\001\000\002\001\001\000\004\036\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		private List<ReportError> listaErrores;
		private FunParser funParser = new FunParser();

	public Parser(Lexer lex){
		super(lex);
		listaErrores = new ArrayList<ReportError>();
	}
	 @Override
	public void syntax_error(Symbol cur_token){
			Token token = (Token) cur_token.value;			
			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
			if(nombreSimbolo.equals("INVALID")){
				addError("Lexico",token,"No se esperaba: " + token.getLexema(),null);
			}else{
				if(token != null){
					String nameToken = funParser.nameTokenNoEsperado(nombreSimbolo);
					if(nameToken == null){
						addError("Sintactico",token,"No se esperaba: " + token.getLexema(),null);
					}else{
						addError("Sintactico",token,"No se esperaba: " + nameToken,null);
					}					
				}else{
					token = new Token(nombreSimbolo,cur_token.left,cur_token.right);
					addError("Sintactico",token,"No se esperaba: " + nombreSimbolo,null);
				}
				
			}		

	}
	@Override
	public void report_fatal_error(String message, Object info){
			String Elerror = "Ocurrio un error no recuperable al analizar: " + message + " -> {objeto: " + info + "}";
			if(info instanceof Symbol ){
				Symbol sim = (Symbol) info;
				Token token = (Token) sim.value;
				if(token == null){
					token = new Token("report_fatal_error",sim.left,sim.right);
				}
				addError("Sintactico",token,message,null);
			}else{
				System.out.println("Error -- :  " + message);
			}
	}
	 @Override
	public void report_error(String message, Object info){
			System.out.println("Error desde el report_error: " + message);
	}
	 @Override
	public void unrecovered_syntax_error(Symbol cur_token){
		report_fatal_error("No se puede reparar y analizar el Error sintactico", cur_token);
	}

	private void addError(String tipoError, Token token,String descError, String solucion){
		try{
			ReportError reporte = new ReportError();
			reporte.setTipoError(tipoError);
			reporte.setColumna(token.getColumna());
			reporte.setLinea(token.getLinea());
			if (solucion == null) {
                reporte.setSolucion(listTokensEsperados());
            }else{
                reporte.setSolucion(solucion);
            }
			reporte.setDescripcion(descError);
			listaErrores.add(reporte);
		}catch(Exception q){

		}

	}

	private String listTokensEsperados(){
		String tokenEsperados = "";
		for (Integer expected_token_id : expected_token_ids()) {
            	if(!symbl_name_from_id(expected_token_id).equals("error")){
            		String nameToken = funParser.nameTokenEsperado(symbl_name_from_id(expected_token_id));
            		if (nameToken == null){
            			tokenEsperados += symbl_name_from_id(expected_token_id).toLowerCase() + " \n ";
            		}else{
            			tokenEsperados += nameToken + " \n ";
            		}            		
            	}                
            }
        return tokenEsperados;
	}

	@Override
	protected int error_sync_size(){
		return 1;
	}
	public List getListaErrores(){
		return listaErrores;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= PISTA creacion_clase cont_inicio 
            {
              Token RESULT =null;
		
					
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // creacion_clase ::= ID_VARIABLE creacion_clase_sig 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // creacion_clase ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // creacion_clase_sig ::= EXTIENDE otras_clases fin_instruccion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase_sig",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // creacion_clase_sig ::= fin_instruccion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase_sig",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // creacion_clase_sig ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_clase_sig",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // otras_clases ::= otras_clases COMA ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_clases",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // otras_clases ::= ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_clases",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // otras_clases ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_clases",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fin_instruccion_todo ::= SALTO TAB 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_instruccion_todo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fin_instruccion ::= SALTO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_instruccion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fin_instruccion_talvez ::= SALTO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_instruccion_talvez",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fin_instruccion_talvez ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_instruccion_talvez",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cont_inicio ::= cont_inicio funciones_inicio_tab 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_inicio",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cont_inicio ::= funciones_inicio_tab 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_inicio",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funciones_inicio_tab ::= TAB funciones_inicio 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_inicio_tab",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funciones_inicio ::= declaracion_asignacion fin_instruccion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_inicio",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funciones_inicio ::= procedimiento 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_inicio",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funciones_tab ::= TAB funciones 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_tab",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funciones ::= declaracion_asignacion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funciones ::= estruc_si 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funciones ::= estruc_switch 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_asignacion ::= declaracion asignacion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_asignacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion ::= KEEP tipo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion ::= tipo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion ::= nombre_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= VAR sig_tipo 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sig_tipo ::= tipo_variable arreglo nombre_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sig_tipo ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_variable ::= ID_ENTERO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_variable ::= ID_BOOLEAN 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_variable ::= ID_DOBLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_variable ::= ID_CARACTER 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_variable ::= ID_CADENA 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arreglo ::= ARREGLO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arreglo ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // nombre_variable ::= ID_VARIABLE otras_variables es_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombre_variable",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // otras_variables ::= otra_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_variables",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // otras_variables ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_variables",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // otra_variable ::= otra_variable nombre_otra_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otra_variable",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // otra_variable ::= nombre_otra_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otra_variable",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nombre_otra_variable ::= COMA id_variable 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombre_otra_variable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // id_variable ::= ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_variable",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // id_variable ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_variable",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // es_array ::= CORI sig_es_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("es_array",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // es_array ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("es_array",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sig_es_array ::= expr CORD es_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_es_array",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sig_es_array ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_es_array",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion ::= IGUAL tipo_datos 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_datos ::= expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_datos",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_datos ::= asig_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_datos",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr SUMA expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr MENOS expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr DIV expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr MULT expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr IGUALACION expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr DIFERENTE expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr MEN_QUE expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr MAY_QUE expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr MENQ expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr MAYQ expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr OR expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr NAND expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr AND expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= NOT expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= NULO expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr POTENCIA expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr XOR expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr NOR expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr MODULO expr 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= PAI expr PAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= MENOS ENTERO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= MENOS DECIMAL 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= ENTERO 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= DECIMAL 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= CHAR 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= STRING 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= BOOLEAN 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= STRING_SIMPLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= funciones_especiales 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asig_array ::= LLAI sig_asig_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asig_array",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sig_asig_array ::= cont_asig_array fin_llave 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_asig_array",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sig_asig_array ::= LLAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_asig_array",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fin_llave ::= LLAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_llave",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fin_llave ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_llave",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cont_asig_array ::= asig_array sig_cont_asig_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_asig_array",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cont_asig_array ::= expr_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_asig_array",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sig_cont_asig_array ::= COMA asig_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_cont_asig_array",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sig_cont_asig_array ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_cont_asig_array",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr_array ::= expr mas_position_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_array",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // mas_position_array ::= COMA sig_position_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_position_array",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // mas_position_array ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_position_array",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sig_position_array ::= expr mas_position_array 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_position_array",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // procedimiento ::= KEEP sig_procedimiento 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // procedimiento ::= sig_procedimiento 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sig_procedimiento ::= tipo_variable ID_VARIABLE parametros 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_procedimiento",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sig_procedimiento ::= ID_VARIABLE parametros 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_procedimiento",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sig_procedimiento ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_procedimiento",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametros ::= PAI sig_parametros cont_procedimiento 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sig_parametros ::= PAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_parametros",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sig_parametros ::= declaracion_mini mas_parametros PAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_parametros",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sig_parametros ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sig_parametros",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cont_procedimiento ::= cont_procedimiento_funciones 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_procedimiento",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cont_procedimiento ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_procedimiento",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cont_procedimiento_funciones ::= cont_procedimiento_funciones cont_procedimiento_funcion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_procedimiento_funciones",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cont_procedimiento_funciones ::= cont_procedimiento_funcion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_procedimiento_funciones",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cont_procedimiento_funcion ::= fin_instruccion_todo funciones_tab 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_procedimiento_funcion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // mas_parametros ::= varios_parametros 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // mas_parametros ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // varios_parametros ::= varios_parametros un_parametro 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_parametros",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // varios_parametros ::= un_parametro 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_parametros",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // un_parametro ::= COMA declaracion_mini 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_parametro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // un_parametro ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_parametro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // declaracion_mini ::= tipo_variable arreglo ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_mini",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // estruc_si ::= si estruc_sino_si 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estruc_si",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // si ::= SI condicion pre_cont_estruc_si 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("si",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // condicion ::= PAI expr PAD 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // condicion ::= error 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // pre_cont_estruc_si ::= cont_estruc_si 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pre_cont_estruc_si",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // pre_cont_estruc_si ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pre_cont_estruc_si",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cont_estruc_si ::= cont_estruc_si cont_estruc_si_funcion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_estruc_si",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cont_estruc_si ::= cont_estruc_si_funcion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_estruc_si",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cont_estruc_si_funcion ::= fin_instruccion_todo TAB const_estruc_si_funcion 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cont_estruc_si_funcion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // const_estruc_si_funcion ::= funciones_tab 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_estruc_si_funcion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // const_estruc_si_funcion ::= SINO puede_si 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_estruc_si_funcion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // puede_si ::= estruc_si 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puede_si",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // estruc_sino_si ::= TAB 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estruc_sino_si",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
