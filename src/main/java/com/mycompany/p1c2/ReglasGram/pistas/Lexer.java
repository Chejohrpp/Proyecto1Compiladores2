// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

 /*Codigo importado*/
package com.mycompany.p1c2.ReglasGram.pistas;
import com.mycompany.p1c2.ReglasGram.Token;
import java_cup.runtime.*;
import static com.mycompany.p1c2.ReglasGram.pistas.sym.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\4\22\0\1\3"+
    "\1\5\1\6\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\11\24\1\0\1\25\1\26\1\27\1\30\2\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\37\1\40\2\37\1\41"+
    "\1\42\1\43\1\37\1\44\1\45\1\37\1\46\1\47"+
    "\2\37\1\50\4\37\1\51\1\0\1\52\1\53\1\31"+
    "\1\0\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\41\1\66\1\67\1\70\1\71"+
    "\1\72\1\37\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\37\1\102\1\103\1\104\1\105\101\0\1\31"+
    "\2\0\1\31\u013d\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\1\1\6"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\17\23\1\24\1\25"+
    "\1\26\3\23\1\27\1\1\1\30\1\31\1\0\1\32"+
    "\2\0\1\33\1\0\1\34\1\35\2\0\1\36\1\37"+
    "\1\40\1\41\1\0\1\16\1\0\1\42\1\43\1\44"+
    "\1\4\24\23\1\45\6\23\1\46\1\47\1\50\2\0"+
    "\1\51\1\52\1\0\32\23\1\53\3\23\1\52\4\23"+
    "\1\54\7\23\1\55\4\23\1\56\5\23\1\57\3\23"+
    "\1\60\1\23\1\52\6\23\1\61\3\23\1\62\4\23"+
    "\1\63\3\23\1\64\3\23\1\52\2\23\1\65\3\23"+
    "\1\66\12\23\1\67\1\23\1\52\1\70\1\71\2\23"+
    "\1\72\1\73\2\23\1\74\1\23\1\75\2\23\1\76"+
    "\2\23\1\52\1\77\1\23\1\100\1\101\1\102\4\23"+
    "\1\103\1\104\1\23\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\106\0\106\0\106\0\214\0\322\0\u0118"+
    "\0\106\0\u015e\0\u01a4\0\106\0\106\0\106\0\u01ea\0\106"+
    "\0\u0230\0\106\0\u0276\0\u02bc\0\106\0\u0302\0\u0348\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\106"+
    "\0\106\0\106\0\u07ee\0\u0834\0\u087a\0\106\0\u08c0\0\106"+
    "\0\106\0\u0906\0\106\0\u094c\0\u0118\0\106\0\u0992\0\106"+
    "\0\106\0\u09d8\0\u0a1e\0\106\0\106\0\106\0\106\0\u0a64"+
    "\0\u0aaa\0\u0af0\0\106\0\106\0\106\0\u0b36\0\u0b7c\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2"+
    "\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022"+
    "\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252"+
    "\0\u1298\0\106\0\106\0\106\0\u12de\0\u1324\0\106\0\u136a"+
    "\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a"+
    "\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca"+
    "\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u0532\0\u1b12\0\u1b58\0\u1b9e\0\u1be4"+
    "\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u0532\0\u1d42\0\u1d88\0\u1dce"+
    "\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u0532\0\u1f2c\0\u1f72\0\u1fb8"+
    "\0\u1ffe\0\u0532\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u0532"+
    "\0\u21a2\0\u21e8\0\u222e\0\u0532\0\u2274\0\u22ba\0\u2300\0\u2346"+
    "\0\u238c\0\u23d2\0\u2418\0\u245e\0\u0532\0\u24a4\0\u24ea\0\u2530"+
    "\0\u0532\0\u2576\0\u25bc\0\u2602\0\u2648\0\u0532\0\u268e\0\u26d4"+
    "\0\u271a\0\u0532\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be"+
    "\0\u0532\0\u2904\0\u294a\0\u2990\0\u0532\0\u29d6\0\u2a1c\0\u2a62"+
    "\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u0532"+
    "\0\u2c92\0\u2cd8\0\u0532\0\u0532\0\u2d1e\0\u2d64\0\u0532\0\u0532"+
    "\0\u2daa\0\u2df0\0\u0532\0\u2e36\0\u0532\0\u2e7c\0\u2ec2\0\u0532"+
    "\0\u2f08\0\u2f4e\0\106\0\u0532\0\u2f94\0\u0532\0\u0532\0\u0532"+
    "\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u0532\0\u0532\0\u30f2\0\u0532"+
    "\0\u0532";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\2\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\2\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\31\1\32\1\33\1\34"+
    "\1\35\1\53\1\36\1\37\2\36\1\41\1\42\1\36"+
    "\1\43\1\44\1\45\1\46\1\54\1\36\1\55\3\36"+
    "\1\56\1\57\1\60\110\0\1\5\110\0\1\61\3\0"+
    "\1\62\15\0\1\63\54\0\1\64\1\0\6\65\1\66"+
    "\1\67\76\65\11\0\1\70\72\0\1\71\1\0\7\72"+
    "\1\73\2\72\1\74\73\72\16\0\1\75\10\0\1\76"+
    "\76\0\1\77\106\0\1\100\1\0\2\101\102\0\1\100"+
    "\1\0\2\24\101\0\1\102\6\0\1\103\105\0\1\104"+
    "\105\0\1\105\1\106\64\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\17\36\1\107\7\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\15\36\1\110\11\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\1\111\14\36\1\112\11\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\4\36\1\113\10\36\1\114\11\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\14\36"+
    "\1\115\3\36\1\116\4\36\1\117\1\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\27\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\1\120\26\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\4\36\1\121\22\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\15\36\1\122\11\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\4\36\1\123\3\36\1\124"+
    "\16\36\12\0\1\36\11\0\1\36\1\0\2\36\4\0"+
    "\20\36\3\0\17\36\1\125\7\36\12\0\1\36\11\0"+
    "\1\36\1\0\2\36\4\0\20\36\3\0\1\126\7\36"+
    "\1\127\6\36\1\130\7\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\4\36\1\131\22\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\1\132\7\36\1\133\11\36\1\134\1\36\1\135"+
    "\2\36\12\0\1\36\11\0\1\36\1\0\2\36\4\0"+
    "\20\36\3\0\1\136\26\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\1\137\26\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\17\36\1\140\7\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\1\136\3\36\1\141\22\36"+
    "\107\0\1\142\12\0\1\143\200\0\1\144\1\0\106\65"+
    "\7\145\1\146\2\145\1\147\73\145\106\72\23\0\2\150"+
    "\104\0\2\101\61\0\20\102\1\151\65\102\2\106\1\0"+
    "\103\106\7\0\1\36\11\0\1\36\1\0\2\36\4\0"+
    "\20\36\3\0\17\36\1\152\7\36\12\0\1\36\11\0"+
    "\1\36\1\0\2\36\4\0\20\36\3\0\15\36\1\153"+
    "\11\36\12\0\1\36\11\0\1\36\1\0\2\36\4\0"+
    "\20\36\3\0\3\36\1\154\13\36\1\155\1\156\6\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\14\36\1\157\12\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\5\36\1\160\21\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\1\36\1\161\25\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\21\36\1\162\5\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\16\36\1\163\10\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\21\36\1\164\5\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\2\36\1\165\24\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\4\36\1\166\22\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\14\36\1\167\12\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\14\36\1\170\12\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\4\36\1\171\22\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\3\36\1\172\23\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\17\36\1\173\7\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\20\36\1\174\6\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\10\36\1\175\16\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\16\36\1\176\2\36"+
    "\1\177\5\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\12\36\1\200\14\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\14\36"+
    "\1\201\12\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\13\36\1\202\13\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\10\36"+
    "\1\203\16\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\17\36\1\204\7\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\12\36"+
    "\1\205\14\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\22\36\1\206\4\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\17\36"+
    "\1\207\7\36\3\0\7\145\1\146\2\145\1\74\201\145"+
    "\23\0\2\210\61\0\30\102\1\5\55\102\7\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\4\36"+
    "\1\211\22\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\12\36\1\212\14\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\4\36"+
    "\1\213\22\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\1\214\26\36\12\0\1\36\11\0"+
    "\1\36\1\0\2\36\4\0\20\36\3\0\15\36\1\215"+
    "\11\36\12\0\1\36\11\0\1\36\1\0\2\36\4\0"+
    "\20\36\3\0\21\36\1\216\5\36\12\0\1\36\11\0"+
    "\1\36\1\0\2\36\4\0\20\36\3\0\1\217\26\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\12\36\1\220\14\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\4\36\1\221\22\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\4\36\1\222\22\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\10\36\1\223\16\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\4\36\1\224\22\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\16\36\1\225\10\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\6\36\1\226\20\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\20\36\1\227\6\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\14\36\1\230\12\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\4\36\1\231\22\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\1\232\26\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\21\36\1\233\5\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\14\36\1\234\12\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\17\36\1\235\7\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\15\36\1\236\11\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\10\36\1\237\16\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\15\36\1\240\11\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\1\241\26\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\21\36"+
    "\1\242\5\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\20\36\1\243\6\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\4\36"+
    "\1\244\22\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\3\36\1\245\23\36\26\0\2\246"+
    "\70\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\6\36\1\247\20\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\4\36\1\250\22\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\14\36\1\251\12\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\2\36\1\252\24\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\10\36\1\253\16\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\22\36\1\254\4\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\4\36\1\255\22\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\17\36\1\256\7\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\17\36\1\257\7\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\4\36\1\260\22\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\17\36\1\261\7\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\10\36\1\262\16\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\1\263\26\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\21\36\1\264\5\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\14\36\1\265\12\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\1\266\26\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\2\36"+
    "\1\267\24\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\15\36\1\270\11\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\17\36"+
    "\1\271\7\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\17\36\1\272\7\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\17\36"+
    "\1\273\7\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\2\36\1\274\24\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\4\36"+
    "\1\244\10\36\1\244\11\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\1\275\26\36\26\0"+
    "\2\276\70\0\1\36\11\0\1\36\1\0\2\36\4\0"+
    "\20\36\3\0\12\36\1\277\14\36\12\0\1\36\11\0"+
    "\1\36\1\0\2\36\4\0\20\36\3\0\1\300\26\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\1\301\26\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\21\36\1\302\5\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\14\36\1\303\12\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\12\36\1\304\14\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\15\36\1\305\11\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\1\306\26\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\14\36"+
    "\1\307\12\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\21\36\1\310\5\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\11\36"+
    "\1\311\15\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\17\36\1\312\7\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\1\313"+
    "\26\36\12\0\1\36\11\0\1\36\1\0\2\36\4\0"+
    "\20\36\3\0\10\36\1\314\16\36\12\0\1\36\11\0"+
    "\1\36\1\0\2\36\4\0\20\36\3\0\3\36\1\315"+
    "\23\36\12\0\1\36\11\0\1\36\1\0\2\36\4\0"+
    "\20\36\3\0\14\36\1\316\12\36\12\0\1\36\11\0"+
    "\1\36\1\0\2\36\4\0\20\36\3\0\10\36\1\317"+
    "\16\36\12\0\1\36\11\0\1\36\1\0\2\36\4\0"+
    "\20\36\3\0\7\36\1\320\17\36\12\0\1\36\11\0"+
    "\1\36\1\0\2\36\4\0\20\36\3\0\3\36\1\321"+
    "\23\36\26\0\2\322\70\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\15\36\1\323\11\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\14\36\1\324\12\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\4\36\1\325\22\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\22\36\1\326\4\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\21\36\1\327\5\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\17\36\1\330\7\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\3\36\1\331\23\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\22\36\1\332\4\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\4\36\1\333\22\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\1\334\26\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\17\36\1\335\7\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\16\36"+
    "\1\336\10\36\12\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\22\36\1\337\4\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\1\340"+
    "\26\36\12\0\1\36\11\0\1\36\1\0\2\36\4\0"+
    "\20\36\3\0\26\36\1\341\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\4\36\1\342\22\36"+
    "\26\0\2\343\70\0\1\36\11\0\1\36\1\0\2\36"+
    "\4\0\20\36\3\0\17\36\1\344\7\36\12\0\1\36"+
    "\11\0\1\36\1\0\2\36\4\0\20\36\3\0\1\345"+
    "\26\36\12\0\1\36\11\0\1\36\1\0\2\36\4\0"+
    "\20\36\3\0\4\36\1\346\22\36\12\0\1\36\11\0"+
    "\1\36\1\0\2\36\4\0\20\36\3\0\3\36\1\347"+
    "\23\36\12\0\1\36\11\0\1\36\1\0\2\36\4\0"+
    "\20\36\3\0\20\36\1\350\6\36\12\0\1\36\11\0"+
    "\1\36\1\0\2\36\4\0\20\36\3\0\1\351\26\36"+
    "\12\0\1\36\11\0\1\36\1\0\2\36\4\0\20\36"+
    "\3\0\2\36\1\352\24\36\12\0\1\36\11\0\1\36"+
    "\1\0\2\36\4\0\20\36\3\0\1\353\26\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\17\36\1\354\7\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\17\36\1\355\7\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\12\36\1\356\14\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\10\36\1\357\16\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\17\36\1\360\7\36\12\0\1\36\11\0\1\36\1\0"+
    "\2\36\4\0\20\36\3\0\15\36\1\244\11\36\12\0"+
    "\1\36\11\0\1\36\1\0\2\36\4\0\20\36\3\0"+
    "\17\36\1\361\7\36\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\3\1\1\11\2\1\3\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\22\1\3\11\3\1\1\11"+
    "\1\1\2\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\2\0\4\11\1\0\1\1\1\0\3\11\34\1\3\11"+
    "\2\0\1\11\1\1\1\0\171\1\1\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private String quitarComilla(String str){
		str = str.substring(1, str.length()-1);
		return str;
	}	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(INVALID,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 71: break;
          case 2:
            { return new Symbol(TAB,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 72: break;
          case 3:
            { return new Symbol(SALTO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 73: break;
          case 4:
            { /* ignorar */
            }
            // fall through
          case 74: break;
          case 5:
            { return new Symbol(NOT,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 75: break;
          case 6:
            { return new Symbol(MODULO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 76: break;
          case 7:
            { return new Symbol(PAI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 77: break;
          case 8:
            { return new Symbol(PAD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 78: break;
          case 9:
            { return new Symbol(MULT,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 79: break;
          case 10:
            { return new Symbol(SUMA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 80: break;
          case 11:
            { return new Symbol(COMA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 81: break;
          case 12:
            { return new Symbol(MENOS,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 82: break;
          case 13:
            { return new Symbol(DIV,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 83: break;
          case 14:
            { return new Symbol(ENTERO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 84: break;
          case 15:
            { return new Symbol(SEMI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 85: break;
          case 16:
            { return new Symbol(MENQ,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 86: break;
          case 17:
            { return new Symbol(IGUAL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 87: break;
          case 18:
            { return new Symbol(MAYQ,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 88: break;
          case 19:
            { return new Symbol(ID_VARIABLE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 89: break;
          case 20:
            { return new Symbol(CORI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 90: break;
          case 21:
            { return new Symbol(CORD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 91: break;
          case 22:
            { return new Symbol(POTENCIA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 92: break;
          case 23:
            { return new Symbol(LLAI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 93: break;
          case 24:
            { return new Symbol(LLAD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 94: break;
          case 25:
            { return new Symbol(NULO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 95: break;
          case 26:
            { return new Symbol(DIFERENTE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 96: break;
          case 27:
            { return new Symbol(STRING,yyline+1,yycolumn+1, new Token(quitarComilla(yytext()),yyline+1,yycolumn+1));
            }
            // fall through
          case 97: break;
          case 28:
            { return new Symbol(AND,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 98: break;
          case 29:
            { return new Symbol(XOR,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 99: break;
          case 30:
            { return new Symbol(STRING_SIMPLE,yyline+1,yycolumn+1, new Token(quitarComilla(yytext()),yyline+1,yycolumn+1));
            }
            // fall through
          case 100: break;
          case 31:
            { return new Symbol(INCREMENTO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 101: break;
          case 32:
            { return new Symbol(MAS_IGUAL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 102: break;
          case 33:
            { return new Symbol(DECREMENTO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 103: break;
          case 34:
            { return new Symbol(MEN_QUE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 104: break;
          case 35:
            { return new Symbol(IGUALACION,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 105: break;
          case 36:
            { return new Symbol(MAY_QUE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 106: break;
          case 37:
            { return new Symbol(SI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 107: break;
          case 38:
            { return new Symbol(OR,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 108: break;
          case 39:
            { return new Symbol(NAND,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 109: break;
          case 40:
            { return new Symbol(NOR,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 110: break;
          case 41:
            { return new Symbol(CHAR,yyline+1,yycolumn+1, new Token(quitarComilla(yytext()),yyline+1,yycolumn+1));
            }
            // fall through
          case 111: break;
          case 42:
            { return new Symbol(DECIMAL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 112: break;
          case 43:
            { return new Symbol(VAR,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 113: break;
          case 44:
            { return new Symbol(CASO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 114: break;
          case 45:
            { return new Symbol(KEEP,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 115: break;
          case 46:
            { return new Symbol(PARA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 116: break;
          case 47:
            { return new Symbol(SINO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 117: break;
          case 48:
            { return new Symbol(BOOLEAN,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 118: break;
          case 49:
            { return new Symbol(ID_DOBLE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 119: break;
          case 50:
            { return new Symbol(HACER,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 120: break;
          case 51:
            { return new Symbol(PISTA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 121: break;
          case 52:
            { return new Symbol(SALIR,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 122: break;
          case 53:
            { return new Symbol(ID_CADENA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 123: break;
          case 54:
            { return new Symbol(ID_ENTERO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 124: break;
          case 55:
            { return new Symbol(SWITCH,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 125: break;
          case 56:
            { return new Symbol(ARREGLO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 126: break;
          case 57:
            { return new Symbol(ID_BOOLEAN,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 127: break;
          case 58:
            { return new Symbol(DEFAULT,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 128: break;
          case 59:
            { return new Symbol(ESPERAR,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 129: break;
          case 60:
            { return new Symbol(MENSAJE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 130: break;
          case 61:
            { return new Symbol(ORDENAR,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 131: break;
          case 62:
            { return new Symbol(RETORNA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 132: break;
          case 63:
            { return new Symbol(ID_CARACTER,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 133: break;
          case 64:
            { return new Symbol(EXTIENDE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 134: break;
          case 65:
            { return new Symbol(LONGITUD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 135: break;
          case 66:
            { return new Symbol(MIENTRAS,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 136: break;
          case 67:
            { return new Symbol(CONTINUAR,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 137: break;
          case 68:
            { return new Symbol(PRINCIPAL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 138: break;
          case 69:
            { return new Symbol(SUMARIZAR,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 139: break;
          case 70:
            { return new Symbol(REPRODUCIR,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
